<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TopCoder.LoggingWrapper.Test</name>
    </assembly>
    <members>
        <member name="T:TopCoder.LoggingWrapper.ConfigException">
            <summary>
            This exception will be thrown by all errors caused by incorrect configuration.  This will happen
            because the Logger can not be succesfully created from the configuration values.
            <para>
            Changes in 3.0: this class is changed to inherit from BaseException. Two constructors are added.
            </para>
            </summary>
            <threadsafety>
            <para>
            This class is immutable thus thread safe.
            </para>
            </threadsafety>
            <author>TCSDEVELOPER, Mikhail_T</author>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <since>2.0</since>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ConfigException.#ctor">
            <summary>
            Creates a new instance of ConfigException.
            <para>
            New in 3.0.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ConfigException.#ctor(System.String)">
            <summary>
            Creates a new instance of ConfigException with a descriptive message about why
            the exception was thrown.
            </summary>
            <param name="message">A descriptive message of why the exception was thrown.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ConfigException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of ConfigException with a descriptive message about why
            the exception was thrown, and a wrapped exception which was the actual cause.
            </summary>
            <param name="message">A descriptive message of why the exception was thrown.</param>
            <param name="cause">The wrapped exception which was the actual cause.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Creates a new instance of ConfigException from the serialization info and streaming context
             given.
             <para>
             New in 3.0.
             </para>
             </summary>
            
             <param name="info">Serialization info for the exception.</param>
             <param name="context">Streaming context of the exception.</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.DiagnosticImpl">
            <summary>
            <para>
            DiagnosticImpl extends from Logger abstract class to log messages using EventLog from the
            System.Diagnostics namespace.
            </para>
            <para>
            Changes in 3.0: A new constructor is added while the old constructor is made obsolete; The
            InitializeZeroConfiguration method is added; Immutable fields are marked readonly. Exceptions are
            now allowed and documented
            </para>
            <para>
            Creating this Logger implementation is done by code like this:
            </para>
            <code>
            Logger logger = LogManager.CreateLogger("TopCoder.LoggingWrapper.DiagnosticImpl");
            </code>
            <para>
            Once created, you may log messages at any of the levels defined in Level.  For example, to log a
            message at the level of INFO, you would use the logger as follows:
            </para>
            <code>
            logger.Log(Level.INFO, "Hello world!");
            </code>
            <para>
            You can also log a named message that has been defined in configuration. The actual message
            will be generated according the the mapped NamedMessage object with given name:
            </para>
            <code>
            logger.LogNamedMessage(Level.DEBUG, "Name of Message", "param1", "param2");
            </code>
            </summary>
            <threadsafety>
            <para>
            The EventLog is not thread safe, so the Log method should locked on the inner log instance to
            ensure the thread-safe. All the other methods are immutable, so thread-safe is not an issue here.
            </para>
            </threadsafety>
            <author>TCSDEVELOPER, Mikhail_T</author>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <since>2.0</since>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="T:TopCoder.LoggingWrapper.Logger">
            <summary>
            <para>
            Logger abstract class should be extended by classes that wish to provide a custom logging
            implementation. The <c>Log</c> method is used to log a message using the underlying implementation,
            and the <c>IsLevelEnabled</c> method is used to determine if a specific logging level is supported
            by underlying implementation.
            </para>
            <para>
            Logger classes are responsible to load implementation specific data by themselves. All
            implementations of Logger that are intended to be instantiated dynamically (i.e. everything except
            ExceptionSafeLog and LevelFilteredLofferclass) should have a constructor that takes an
            IConfiguration argument. They should also have a static InitializeZeroConfiguration method that
            takes a ZeroConfigurationOption argument and an IConfiguration argument.
            </para>
            <para>
            Changes in 3.0: The constructor invoked by reflection has changed from taking an IDictionary to
            taking an IConfiguration argument; the LogNamedMessage methods have been added, as has the
            supported namedMessages property; log methods now throw exceptions. These can be suppressed (to
            maintain backward compatible behavior) by wrapping a logger in an ExceptionSafeLogger. This can
            be specified by setting the propagate_exceptions configuration value to false.
            </para>
            <para>
            Changes in 2.0: The Logname property is moving upward from its two subclasses, and the Log,
            IsLevelEnabled method are made public; a new constructor taking a properties argument is added.
            Its subclasses should always have a constructor taking a properties argument in order to be created
            dynamically from the LogManager.CreateLogger method. The constructor should be responsible for
            loading necessary configuration values from the properties retrieved from ConfigManager to
            correctly initialize the logger instance. After the logger is created, we are expected to use the
            Logger.Log method to log the message directly, so the messages are logged per logger instance. The
            ConfigFile property and Level property are obsolete and kept for back compatibility.
            </para>
            </summary>
            <threadsafety>
            <para>
            The ConfigFile and Level properties are obsolete (which should never be used). This class is
            immutable, so it is thread safe inherently, and its subclasses are expected to be immutable if
            possible, otherwise, its subclasses should lock carefully to ensure thread-safety.
            </para>
            </threadsafety>
            <author>TCSDEVELOPER, Mikhail_T</author>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <since>2.0</since>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.DEFAULT_LEVEL_VALUE">
            <summary>
            <para>
            Represents the default level to be used when the attribute is not provided in constructor.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.NAMED_MESSAGES">
            <summary>
            <para>
            Represents the NamedMessages child configuration to load from configuration.
            </para>
            <para>
            It is used by the constructor to get the value to initialize the namedMessages variable.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.TEXT">
            <summary>
            <para>
            Represents the text property key to load from NamedMessages child configuration.
            </para>
            <para>
            It is used by the constructor to get the value to initialize the namedMessage instance.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.PARAMETERS">
            <summary>
            <para>
            Represents the parameters property key to load from NamedMessages child configuration.
            </para>
            <para>
            It is used by the constructor taking a IConfiguration argument to get the value to initialize
            the namedMessage instance.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.DEFAULT_LEVEL">
            <summary>
            <para>
            Represents the default_level property key to load from configuration.
            </para>
            <para>
            It is used by the constructor taking a namespace argument to get the value to assign to the
            level variable.
            </para>
            <para>
            Changes in 3.0: As of this version, this is the key used to load the value from
            IConfiguration instead of ConfigManager.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.LOGGER_NAME">
            <summary>
            <para>
            Represents the logger_name property key to load from configuration.
            </para>
            <para>
            It is used by the constructor taking a namespace argument to get the value to assign to the
            logname variable.
            </para>
            <para>
            Changes in 3.0: As of this version, this is the key used to load the value from
            IConfiguration instead of ConfigManager.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.defaultLevel">
            <summary>
            <para>
            Represents the default logging level.
            </para>
            <para>
            This variable defaults to Level.DEBUG if not set. It can be set in the constructor.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.logname">
            <summary>
            <para>
            The log name of the logger.
            </para>
            <para>
            It is initialized in the constructor and never changed.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.configfile">
            <summary>
            Represents the configuration file name which might be useful for its subclasses.
            It is obsolete now and should not be used.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Logger.namedMessages">
            <summary>
            <para>
            The set of named messages that this logger can use when the LogNamedMessage method is called.
            </para>
            <para>
            This is a dictionary from the message identifiers to the NamedMessage instances containing the
            data needed to do the logging. This map is initialized in the constructor and is immutable
            (also, values are never added/removed/changed). Will never be null, but may be empty. Used in
            the LogNamedMessage methods, and also by subclasses.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.#ctor(System.String)">
            <summary>
            <para>
            Creates a new instance of Logger with the given log name. Initially the default level of the
            logger is set to Level.DEBUG.
            </para>
            <para>
            Changes in 3.0: no named messages is provided.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <exception cref="T:System.ArgumentNullException">If logname is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.#ctor(System.String,TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Creates a new instance of Logger with the given log name and default level.
            </para>
            <para>
            Changes in 3.0: no named messages is provided.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <param name="defaultLevel">The default logging level.</param>
            <exception cref="T:System.ArgumentNullException">If logname is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.#ctor(System.String,TopCoder.LoggingWrapper.Level,System.Collections.Generic.IDictionary{System.String,TopCoder.LoggingWrapper.NamedMessage})">
            <summary>
            <para>
            Creates a new instance of Logger with the log name and the default level and set of named
            messages.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <param name="defaultLevel">The default logging level.</param>
            <param name="namedMessages">The dictionary mapping identifiers to named messages that should be
            used by this logger.</param>
            <exception cref="T:System.ArgumentNullException">If logname or namedMessages is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string, or namedMessages contains an
            empty key or any null values.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.#ctor(System.Collections.IDictionary)">
            <summary>
            <para>
            Creates a new instance of the Logger with setting loaded from the given properties dictionary.
            </para>
            <para>
            Changes in 3.0: It is made obsolete, replaced by constructor with IConfiguration as parameter;
            no named messages will be provided.
            </para>
            </summary>
            <param name="properties">The configuration dictionary.</param>
            <exception cref="T:System.ArgumentNullException">If properties is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If logger_name or default_level is not correctly retrieved from the properties.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Creates a new instance of the Logger with setting loaded from the given configuration.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="configuration">The configuration object to load settings from.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
             If any of the configuration settings are missing or are invalid values.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.AddNamedMessage(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Loads the attributes in given configuration to create a NamedMessage object and add it to
            namedMessages dictionary with name of configuration as key.
            </para>
            <para>
            If default_level is not provided in configuration, the default level of logger will be used
            as default level of named message.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="config">The configuration object to load settings from.</param>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
             If any of the configuration settings are missing or are invalid values.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.Dispose">
            <summary>
            <para>
            Disposes the resources held by the logger.
            </para>
            <para>
            If the implementation holds resources such as a file, etc. then they should be released here if
            the logger will never be used again.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message using the underlying implementation with the specified logging level.
            </para>
            <para>
            Changes in 3.0: Exceptions are now allowed and documented. Exceptions can be suppressed by
            wrapping the logger in an ExceptionSafeLogger.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
            <exception cref="T:System.ArgumentNullException">If message or param is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.Log(System.String,System.Object[])">
            <summary>
            <para>
            Logs a message using the underlying implementation with the default logging level.
            </para>
            <para>
            Changes in 3.0: Exceptions are now allowed and documented. Exceptions can be suppressed by
            wrapping the logger in an ExceptionSafeLogger; This method has been made virtual.
            </para>
            </summary>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
            <exception cref="T:System.ArgumentNullException">If message or param is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Used to determine if a specific logging level is supported by underlying implementation.
            </para>
            </summary>
            <param name="level">The logging level to check.</param>
            <returns>true if the level is supported by the logger.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.LogNamedMessage(System.String,System.Object[])">
            <summary>
            <para>
            Logs a named message at its default level.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="messageIdentifier">The string identifying which named message to log.</param>
            <param name="param">The parameters to use to format the message.</param>
            <exception cref="T:System.ArgumentNullException">If messageIdentifier or param is null.</exception>
            <exception cref="T:System.ArgumentException">If messageIdentifier is the empty string, or
            messageIdentifier is not in the keys of the namedMessages dictionary.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message from
            the params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If there is a failure in the backend logging system.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.LogNamedMessage(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a named message at the given level.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="level">The logging level at which to log the message.</param>
            <param name="messageIdentifier">The string identifying which named message to log.</param>
            <param name="param">The parameters to use to format the message.</param>
            <exception cref="T:System.ArgumentNullException">If messageIdentifier or param is null.</exception>
            <exception cref="T:System.ArgumentException">If messageIdentifier is the empty string, or
            messageIdentifier is not in the keys of the namedMessages dictionary.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message from
            the params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If there is a failure in the backend logging system.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Logger.LogNamedMessage(TopCoder.LoggingWrapper.Level,TopCoder.LoggingWrapper.NamedMessage,System.Object[])">
            <summary>
            <para>
            Logs the named message to the underlying implementation with the specified logging level.
            </para>
            <para>
            Subclasses may override this method to perform appropriate backend specific processing, if the
            backend supports message parameters in a superior way to the normal way it is handled in the
            Log method.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The named message to log.</param>
            <param name="param">The parameters to use in formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If any parameter is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message from
            the params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If there is a failure in the backend logging system.
            </exception>
        </member>
        <member name="P:TopCoder.LoggingWrapper.Logger.DefaultLevel">
            <summary>
            <para>
            Represents the property to get the default logging level.
            </para>
            <para>
            Changes in 3.0: It is made virtual.
            </para>
            </summary>
            <value>The default logging level.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.Logger.Logname">
            <summary>
            <para>
            Represents the property to get the log name of the logger.
            </para>
            <para>
            Changes in 3.0: It is made virtual.
            </para>
            </summary>
            <value>The log name of the logger.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.Logger.Level">
            <summary>
            Represents the default logging level. This variable is default to Level.DEBUG if not set,
            it can be assigned in the constructor or the corresponding setter method. The getter method
            will simply return the defaultLevel variable, and the setter will simply assign the value to
            the defaultValue.
            </summary>
            <value>The default logging level.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.Logger.ConfigFile">
            <summary>
            Represents the configuration file name which might be useful for its subclasses.
            The getter will simply return configFile variable, and the setter will simply assign the value
            to the configFile variable.
            It is obsolete now and should not be used.
            </summary>
            <exception cref="T:System.ArgumentNullException">If given value is null.</exception>
            <value>The configuration file name which might be useful for its subclasses.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.Logger.NamedMessages">
            <summary>
            <para>
            Represents the property to get a copy of the set of named messages that can be used with this
            logger.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <value>The set of named messages that can be used with this logger.</value>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImpl.SOURCE">
            <summary>
            <para>
            Represents the "source" property key to load from the configuration. It is used by the
            constructors to get the value to create the EventLog instance.
            </para>
            <para>
            Changes in 3.0: This is the key used to load the value from IConfiguration instead of
            ConfigManager.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImpl.DEFAULT_SOURCE">
            <summary>
            <para>
            The default value to set for "source" property in configuration. It is used in method
            InitializeZeroConfiguration.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImpl.DEFAULT_EVENT_LOG">
            <summary>
            <para>
            Represent the defalut logger name.
            </para>
            <para>
            Bugr-fix 427
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImpl.levelMapping">
            <summary>
            <para>
            Represents the level mapping from the Level enumeration to that of EventLog. The key is the
            Level value, and the value is the corresponding level in EventLog. It is populated in static
            constructor.
            </para>
            <para>
            Changes in 3.0: generic collection is used. And it is readonly now.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImpl.log">
            <summary>
            <para>
            Represents the EventLog instance to log the messages to.
            </para>
            <para>
            It is initialized in the constructor, is immutable, and can not be null.
            </para>
            <para>
            Changes in 3.0: It is readonly now.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImpl.source">
            <summary>
            <para>
            Represents the source of the EventLog. It will be used to create the EventLog variable.
            </para>
            <para>
            Set in the constructor, immutable, and can not be null or an empty string.
            </para>
            <para>
            Changes in 3.0: It is readonly now.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImpl.#ctor(System.Collections.IDictionary)">
            <summary>
            <para>
            Create a new instance of DiagnosticImpl from the configuration values loaded from the
            properties IDictionary.
            </para>
            <para>
            Changes in 3.0: It is made obsolete, replaced by constructor with IConfiguration as parameter.
            </para>
            </summary>
            <param name="properties">The configuration dictionary.</param>
            <exception cref="T:System.ArgumentNullException">If properties is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If there is a failure to load configuration values, or create the instance of the class.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImpl.#ctor">
            <summary>
            <para>
            Creates a new instance of DiagnosticImpl with defalut logger name.
            </para>
            <para>
            Bugr-fix 427
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImpl.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Creates a new instance of DiagnosticImpl with setting loaded from the given configuration.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="configuration">The configuration object to load settings from.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
             If any of the configuration settings are missing or are invalid values.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImpl.Dispose">
            <summary>
            <para>
            Disposes the resources held by the DiagnosticImpl instance.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImpl.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Returns true if the level is supported by the DiagnosticImpl instance. All levels in Level are
            supported by the current implementations.
            </para>
            </summary>
            <param name="level">The logging level to check.</param>
            <returns>true for all levels in Level.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImpl.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message to the EventLog instance used by this class.
            </para>
            <para>
            If the level is not supported by this class, or the level is off, the message will not be logged.
            </para>
            <para>
            Changes in 3.0: Exceptions are now allowed and documented. Exceptions can be suppressed by
            wrapping the logger in an ExceptionSafeLogger.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
            <exception cref="T:System.ArgumentNullException">If message or params is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImpl.InitializeZeroConfiguration(TopCoder.LoggingWrapper.ZeroConfigurationOption,TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Initializes the diagnostic backend for the zero configuration logging option.
            </para>
            <para>
            System.Diagnostic output does not go to log files, nor is there the same level of control
            (rolling logs, etc) as offered by log4NET. So all zero-configuration options are treated the
            same by this class, and no setup of System.Diagnostics is performed.
            </para>
            <para>
            The one action we do take is if the "source" property is not in the configuration, we put the
            value "TopCoder Logger" as the value of this property into the configuration.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="option">The option about which zero-configuration setup should be configured in
            the backend.</param>
            <param name="configuration">The configuration object to which needed configuration settings are
            added.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If any error occurs when accessing the configuration.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImpl.#cctor">
            <summary>
            <para>
            This static constructor initializes the level mapping for all DiagnosticImpl instances.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.ELSAppender">
            <summary>
            <para>
            The ELSAppender is a custom log4NET appender that forwards logging events to a TopCoder Enterprise
            Logging Service instance. It follows the basic pattern for an ELSAppender, inheriting from a
            skeleton appender provided by the framework. This class can be instantiated based on settings in
            the log4NET config file, as shown in the component spec.
            </para>
            </summary>
            <threadsafety>
            <para>
            This class is not immutable, as the Url property can be changed, which then changes the
            loggingService. In normal use, this property should only be called by the log4NET framework when
            instantiating the appender. It should not be called otherwise. For all practical purposes, this
            class should be considered immutable. This class is thread-safe as long as the Url property is not
            used except by the log4NET framework.
            </para>
            </threadsafety>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppender.SERVICECONFIGURATIONKEY">
            <summary>
            <para>Key used to create the <see cref="T:TopCoder.LoggingWrapper.ELS.ILoggingService"/> instance using
            object factory.</para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppender.loggingService">
            <summary>
            <para>
            The enterprise logging service that this appender forwards logging events to, changed in
            bug fix.
            </para>
            <para>
            This field is initialized in the <see cref="M:TopCoder.LoggingWrapper.ELS.ELSAppender.#ctor(TopCoder.Configuration.IConfiguration)"/>
            constructor.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppender.levelMapping">
            <summary>
            <para>
            Represents the mapping from the Level enumeration in log4NET to that in TC Logging Wrapper.
            </para>
            <para>
            The key is the Level value in Log4NET, and the value is the corresponding level in TC Logging
            Wrapper. It is populated in static constructor.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppender.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Constructor for creating an appender programmatically with given logging service.
            </para>
            </summary>
            <param name="serviceConfiguration">The configuration that the appender is created from.</param>
            <exception cref="T:System.ArgumentNullException">If service is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            <para>
            Appends the logging event to the backend logging service.
            </para>
            </summary>
            <param name="loggingEvent">The logging event to append.</param>
            <exception cref="T:System.ArgumentNullException">If loggingEvent is null</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If the call to the logging service fails.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppender.OnClose">
            <summary>
            <para>
            Releases the resource used by this appender.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppender.#cctor">
            <summary>
            <para>
            This static constructor initializes the level mapping from Level in Log4NET to Level in TC
            Logging Wrapper.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.ELSImpl">
            <summary>
            <para>
            The ELSImpl class is a simple Logger implementation that forwards all Log and LogNamedMessage calls
            to an instance of the EnterpriseLoggingService.
            </para>
            </summary>
            <threadsafety>
            <para>
            This class is immutable and hence thread-safe. Use of the WCF service is thread-safe.
            </para>
            </threadsafety>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImpl.SERVICECONFIGURATIONKEY">
            <summary>
            <para>Key used to create the <see cref="T:TopCoder.LoggingWrapper.ELS.ILoggingService"/> instance using
            object factory.</para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImpl.loggingService">
            <summary>
            <para>
            The enterprise logging service that this logger forwards log messages to.
            </para>
            <para>
            This field is immutable, set in the constructor, and can not be null. Used in the Log method.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImpl.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Creates a new ElSImpl instance with setting loaded from given configuration.
            </para>
            </summary>
            <param name="configuration">The configuration object to load settings from.</param>
            <exception cref="T:System.ArgumentNullException">If the configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If any of the configuration settings are missing or are
            invalid values, or if there is an exception when instantiating the logging service.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImpl.Dispose">
            <summary>
            <para>
            Disposes the logging service used by this logger.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImpl.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            Returns true if the level is supported by the logger. All levels are supported.
            </summary>
            <param name="level">The logging level to check.</param>
            <returns>true for all levels.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImpl.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message by forwarding to the logging service.
            </para>
            <para>
            If the level is not supported by this class, or the level is off, the message will not be logged.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
            <exception cref="T:System.ArgumentNullException">If message or param is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If any error occurs when accessing the configuration.
            </exception>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory">
             <summary>
             <para>
             This class provides one plugin implementation of Object Factory component.
             </para>
             </summary>
            
             <remarks>
             <para>
             The Object Factory component provides a generic infrastructure for dynamic
             object creation at run-time. It provides a standard interface to create
             objects based on object definitions that can be obtained from some source.
             This class provides one such source using the <see cref="T:TopCoder.Configuration.IConfiguration"/>
             interface from the Configuration API component.
             </para>
            
             <para>
             There are two kinds of hierarchical structure in <see cref="T:TopCoder.Configuration.IConfiguration"/>
             that are supported by this class.
             </para>
            
             <para>
             The first one is FLAT hierarchical structure, which is nearly the same with
             the structure of configuration file in <b>ConfigurationObjectFactory</b>
             which uses ConfigManager to load the configuration source from file, except
             that the node text is changed to be attribute value of "node_value" attribute
             (I.e. <c>&lt;value&gt;[node text]&lt;/value&gt;</c> is changed to be
             <c>&lt;value_n node_value = "[node text]" /&gt;</c>, because the <see cref="T:TopCoder.Configuration.IConfiguration"/>
             doesn't have the "node text" concept).
             </para>
            
             <para>
             Another is NESTED hierarchical structure, which is newly defined in this component
             to fully use the nested property of Configuration API component. NESTED hierarchical
             structure is encouraged for newly designed/developed component in that it is better
             structured and more readable.
             </para>
            
             <para>
             The <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveDefinition(System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition)"/> method is added in version 1.1. It is used to
             save the specified object definition in <see cref="T:TopCoder.Configuration.IConfiguration"/> object
             with the specified key.
             </para>
            
             <para>
             The <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.DeleteDefinition(System.String)"/> method is added in version 1.1. It is used to
             delete the object definition with the specified key from <see cref="T:TopCoder.Configuration.IConfiguration"/>
             object with the specified key.
             </para>
             </remarks>
            
             <threadsafety>
             This class is mutable. However, the thread-safety depends on the
             <see cref="T:TopCoder.Configuration.IConfiguration"/> instance used in this class. If the
             <see cref="T:TopCoder.Configuration.IConfiguration"/> used is thread safe, this class is thread safe,
             else it is not. To be used in thread safe manner, please make sure the
             <see cref="T:TopCoder.Configuration.IConfiguration"/> used to instantiate this class is thread safe.
             </threadsafety>
            
             <author>justforplay</author>
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ModifiableObjectFactory">
             <summary>
             To support modification and saving of object definitions, the abstract subclass of ObjectFactory is added.
             The class provides the API to modify the existing (or create a new) object definition and save it in the object
             definition source. It also provides the API to delete the object definitions given their keys.
             </summary>
            
             <remarks>
             <p>Thread Safety:
             The class is extended from <code>ObjectFactory</code> which is thread safe, and it doesn't add
             mutable data member. Thus, this class is thread safe.</p>
             </remarks>
            
             <author>TCSDEVELOPER</author>
             <version>1.2</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory">
             <summary>
             <p>The ObjectFactory class provides a dynamic object instantiation functionality.</p>
             </summary>
            
             <remarks>
             <p>This class provides a very large number of method overloads that allow all kinds of
             object instantiations to be done. Here are the possible instantiation options:</p>
             <p>an optional application domain (AppDomain) can be specified to create the object into;
             an optional new application domain name can be created for the object;
             the type can be passed as a Type or as a type name;
             optionally the assembly to load it from can be given;
             a list of parameters can be given;
             all the above info can be taken from an external definition source based on a key
             (for example a property name for a configuration file based definition source);
             there are also overloads for rarely used reflection options allowing access to the full
             potential of reflection.</p>
             <p>All this capabilities are implemented using 15 static and 9 non-static methods overloads
             for different combinations between the above options.</p>
            
             <p>This class uses an abstract factory pattern. It defines an abstract method for object
             definition retrieval. This isolates the reflection logic from the definition info retrieval.
             The concrete implementations will have to implement only ONE method. There are 4 static
             factory methods that make the access to the object factories easier and pluggable through
             the use of a configuration file. This configuration file allows to associate a name with
             a definition sources. By changing the configuration file a totally different factory can
             be used with no code changes.</p>
            
             <p>Version 1.1: This class now supports invocation of methods on the created objects
             (see the CreateDefinedObject overloads and ApplyMethod). It also supports various
             instantiation lifetimes of objects</p>
            
             <p>
             <i>Version 1.2 : </i>
             Visibility of GetDefinition(string) is changed to public from protected.
             </p>
             <p>Thread Safety:
             The factoryLifetimesObjects map is synchronized. Thus, this class is thread safe.</p>
             </remarks>
            
             <author>adic</author>
             <author>LittleBlack</author>
             <author>aubergineanode</author>
             <author>nebula.lam</author>
             <author>TCSDEVELOPER</author>
             <version>1.2</version>
             <since>1.1</since>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.DefaultString">
            <summary>
            <p>Represents the default string.</p>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.DefaultNamespace">
            <summary>
            <p>Represents the default namespace.</p>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.DefaultIgnoreCase">
            <summary>
            <p>>Represents the const default ignore case.</p>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.factoryLifetimeObjects">
             <summary>
             <p>Represents the map (from string keys to object instances) of objects that have been loaded
             and have the 'Factory' instantiation lifetime.</p>
             </summary>
            
             <remarks>
             <p>All keys in the dictionary are non-null, non-empty strings. A value in the map can be
             of any type, but can not be null.</p>
            
             <p>This field is added to and accessed in the GetDefinedObject method (and perhaps also
             in developer added methods), and the contents can be cleared through the ClearFactoryLifetimeObjects
             method. Otherwise, entries can only be added to the dictionary.</p>
            
             <p>The dictionary field itself will not change or even be null.</p>
             </remarks>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.#ctor">
            <summary>
            <p>Creates a new instance of ObjectFactory.</p>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String,System.String,System.String)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name and an assembly file to use and creates
             the object into a new application domain with a given name.</p>
             </remarks>
            
             <param name="appDomain">The application domain name to create.</param>
             <param name="assembly">The assembly file to use.</param>
             <param name="type">The type name of the object to create.</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             If any argument is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If any argument is empty.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String,System.String,System.String,System.Object[])">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name and an assembly file to use and creates
             the object into a new application domain with a given name.</p>
             </remarks>
            
             <param name="appDomain">The application domain name to create.</param>
             <param name="assembly">The assembly file to use.</param>
             <param name="type">The type name of the object to create.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             If appDomain, assembly or type is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If appDomain, assembly or type is empty.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String,System.String,System.String,System.Object[],System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name and a parameter list to use. It creates the object
             into a new application domain (name is given). It also specifies a lot of rarely used
             reflection parameters. This overload is defined so that all reflection options are accessible.</p>
             </remarks>
            
             <param name="activationAttributes">Activation attributes (see .NET documentation).</param>
             <param name="appBasePath">
             The base directory that the assembly resolver uses to probe for assemblies (see .NET documentation).
             </param>
             <param name="appDomain">The new application domain name to create.</param>
             <param name="appRelativeSearchPath">
             The path relative to the base directory where the assembly resolver should probe for
             private assemblies (see .NET documentation).
             </param>
             <param name="assembly">The assembly to load.</param>
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of
             members, and retrieval of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for
             the type constructor (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="securityAttributes">Security attributes for creation authorization (see .NET doc).</param>
             <param name="shadowCopyFiles">
             If true, a shadow copy of an assembly is loaded into this application domain (see .NET documentation).
             </param>
             <param name="type">The type name of the object to create.</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             If the appDomain, type or assembly arguments is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the appDomain, type or assembly arguments is empty.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.AppDomain,System.String,System.String)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name and an assembly file to use and creates
             the object into a given application domain.</p>
             </remarks>
            
             <param name="appDomain">The application domain.</param>
             <param name="assembly">The assembly file to use.</param>
             <param name="type">The type name of the object to create.</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If any argument is null.</exception>
             <exception cref="T:System.ArgumentException">If assembly or type is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.AppDomain,System.String,System.String,System.Object[])">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name, a parameter list and an assembly file to use and
             creates the object into a given application domain.</p>
             </remarks>
            
             <param name="appDomain">The application domain.</param>
             <param name="assembly">The assembly file to use.</param>
             <param name="type">The type name of the object to create.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If appDomain, assembly or type is null.</exception>
             <exception cref="T:System.ArgumentException">If assembly or type is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.AppDomain,System.String,System.String,System.Object[],System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name and a parameter list to use. It creates the
             object into a new application domain (name is given). It also specifies a lot of
             rarely used reflection parameters. This overload is defined so that all reflection
             options are accessible.</p>
             </remarks>
            
             <param name="activationAttributes">Activation attributes (see .NET documentation).</param>
             <param name="appDomain">The new application domain name to create.</param>
             <param name="assembly">The assembly to load.</param>
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members, and retrieval
             of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the type
             constructor (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="securityAttributes">Security attributes for creation authorization.</param>
             <param name="type">The type name of the object to create.</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the appDomain, type or assembly is null.</exception>
             <exception cref="T:System.ArgumentException">If the type or assembly is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.String,System.String)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies the key for the object definition. It also specifies a new
             application domain to create the object into.</p>
             </remarks>
            
             <param name="key">The key for the object definition.</param>
             <param name="appDomain">The application domain.</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or could
             signal an implementation specific problem (missing property, parse error, etc)
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If appDomain or key is null.</exception>
             <exception cref="T:System.ArgumentException">If appDomain or key is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.String,System.String,System.Object[])">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies the key for the object definition and also a parameter list which
             OVERRIDES the parameter list from the object definition for the given key.
             It also specifies a new application domain to create the object into.</p>
             </remarks>
            
             <param name="key">The key for the object definition.</param>
             <param name="appDomain">The application domain.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or could
             signal an implementation specific problem (missing property, parse error, etc)
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If appDomain or key is null.</exception>
             <exception cref="T:System.ArgumentException">If appDomain or key is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.String,System.String,System.Object[],System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies the key for the object definition, the parameter list which OVERRIDES
             the parameter list from the object definition for the given key and a lot of rarely used reflection
             options. It also specifies a new application domain to create the object into.</p>
             </remarks>
            
             <param name="activationAttributes">Activation attributes (see .NET documentation).</param>
             <param name="appBasePath">
             The base directory that the assembly resolver uses to probe for assemblies (see .NET documentation).
             </param>
             <param name="appDomain">The new application domain name.</param>
             <param name="appRelativeSearchPath">
             The path relative to the base directory where the assembly resolver should probe for
             private assemblies (see .NET documentation).
             </param>
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members, and retrieval
             of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the
             type constructor (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="key">The key for the object definition.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="securityAttributes">Security attributes for creation authorization (see .NET doc).</param>
             <param name="shadowCopyFiles">
             If true, a shadow copy of an assembly is loaded into this application domain (see .NET documentation).
             </param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or could
             signal an implementation specific problem (missing property, parse error, etc)
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If appDomain or key is null.</exception>
             <exception cref="T:System.ArgumentException">If appDomain or key is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.AppDomain,System.String)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies the key for the object definition. It also specifies
             the application domain to create the object into.</p>
             </remarks>
            
             <param name="key">The key for the object definition.</param>
             <param name="appDomain">The application domain.</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or could
             signal an implementation specific problem (missing property, parse error, etc)
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If appDomain or key is null.</exception>
             <exception cref="T:System.ArgumentException">If key is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.AppDomain,System.String,System.Object[])">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies the key for the object definition and also a parameter list which
             OVERRIDES the parameter list from the object definition for the given key. It also specifies
             the application domain to create the object into.</p>
             </remarks>
            
             <param name="key">The key for the object definition.</param>
             <param name="appDomain">The application domain.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or could
             signal an implementation specific problem (missing property, parse error, etc)
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If appDomain or key is null.</exception>
             <exception cref="T:System.ArgumentException">If key is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.AppDomain,System.String,System.Object[],System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
             <summary>
             <p>Dynamically creates an object using reflection. The definition information is taken from an
             implementation specific source (could be a configuration file, could be a database, etc).</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies the key for the object definition but also a parameter list.
             This parameter list OVERRIDES the parameter list that may be specified in the object definition
             for the given key. There are also a lot of rarely used reflection options that can be specified.
             The object is created into the given application domain.</p>
             </remarks>
            
             <param name="activationAttributes">Activation attributes (see .NET documentation).</param>
             <param name="appDomain">The application domain to create into.</param>
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of/ members, and
             retrieval of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the
             type constructor (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="key">The key for the object definition.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="securityAttributes">Security attributes for creation authorization (see .NET doc).</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or could
             signal an implementation specific problem (missing property, parse error, etc)
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If appDomain or key is null.</exception>
             <exception cref="T:System.ArgumentException">If key is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name.</p>
             </remarks>
            
             <param name="type">The type of the object to create.</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the type is null.</exception>
             <exception cref="T:System.ArgumentException">If the type is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String,System.Object[])">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name and a parameter list to use.</p>
             </remarks>
            
             <param name="type">The type name of the object to create.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the type is null.</exception>
             <exception cref="T:System.ArgumentException">If the type is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String,System.Object[],System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name and a parameter list to use. It also specifies
             a lot of rarely used reflection parameters. This overload is defined so that all reflection
             options are accessible.</p>
             </remarks>
            
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members, and
             retrieval of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the type constructor
             (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="modifiers">
             An array of ParameterModifier objects representing the attributes associated with the corresponding
             element in the types array (see .NET documentation).
             </param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="type">The type name of the object to create.</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="callConvention">
             The CallingConventions object that specifies the set of rules to use regarding the order and layout
             of arguments, how the return value is passed, what registers are used for arguments, and the stack
             is cleaned up (see .NET documentation).
             </param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the type is null.</exception>
             <exception cref="T:System.ArgumentException">If the type is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String,System.String)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name and an assembly file to use.</p>
             </remarks>
            
             <param name="assembly">The assembly file to use.</param>
             <param name="type">The type name of the object to create.</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If any argument is null.</exception>
             <exception cref="T:System.ArgumentException">If any argument is empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String,System.String,System.Object[])">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a type name, a parameter list and an assembly file to use.</p>
             </remarks>
            
             <param name="assembly">The assembly file to use.</param>
             <param name="type">The type name of the object to create.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If assembly or type is null.</exception>
             <exception cref="T:System.ArgumentException">If assembly or type is empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.String,System.String,System.Object[],System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo)">
             <summary>
             <p>Dynamically creates an object using reflection. This overload specifies a type name and a parameter
             list to use. It also specifies a lot of rarely used reflection parameters. This overload is defined
             so that all reflection options are accessible.</p>
             </summary>
            
             <param name="assembly">The assembly to load.</param>
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members, and retrieval
             of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the
             type constructor (see .NET documentation).
             </param>
             <param name="callConvention">
             The CallingConventions object that specifies the set of rules to use regarding the order and layout of
             arguments, how the return value is passed, what registers are used for arguments, and the stack
             is cleaned up (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="modifiers">
             An array of ParameterModifier objects representing the attributes associated with the corresponding
             element in the types array (see .NET documentation).
             </param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="type">The type name of the object to create.</param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If assembly or type is null.</exception>
             <exception cref="T:System.ArgumentException">If assembly or type is empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.Type)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies only a Type.</p>
             </remarks>
            
             <param name="type">The type of the object to create.</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the argument is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.Type,System.Object[])">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a Type and a parameter list to use.</p>
             </remarks>
            
             <param name="type">The type of the object to create.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the type argument is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.Type,System.Object[],System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>This overload specifies a Type and a parameter list to use. It also specifies
             a lot of rarely used reflection parameters. This overload is defined so that all
             reflection options are accessible.</p>
             </remarks>
            
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members,
             and retrieval of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the type
             constructor (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="modifiers">
             An array of ParameterModifier objects representing the attributes associated with the
             corresponding element in the types array (see .NET documentation).
             </param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="type">The type of the object to create.</param>
             <param name="callConvention">
             The CallingConventions object that specifies the set of rules to use regarding the order and layout
             of arguments, how the return value is passed, what registers are used for arguments, and the stack
             is cleaned up (see .NET documentation).
             </param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the type argument is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.String)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies only the key for the object definition.</p>
             </remarks>
            
             <param name="key">The key for the object definition.</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or
             could signal an implementation specific problem (missing property, parse error, etc).
             </exception>
             <exception cref="T:System.ArgumentNullException">If the key argument is null.</exception>
             <exception cref="T:System.ArgumentException">If the key argument is empty string.</exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.String,System.Object[])">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies the key for the object definition but also a parameter list.
             This parameter list OVERRIDES the parameter list that may be specified in the object definition
             for the given key.</p>
             </remarks>
            
             <param name="key">The key for the object definition.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or
             could signal an implementation specific problem (missing property, parse error, etc).
             </exception>
             <exception cref="T:System.ArgumentNullException">If the key argument is null.</exception>
             <exception cref="T:System.ArgumentException">If the key argument is empty string.</exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.String,System.Object[],System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <remarks>
             <p>The definition information is taken from an implementation specific source
             (could be a configuration file, could be a database, etc).</p>
            
             <p>This overload specifies the key for the object definition but also a parameter list.
             This parameter list OVERRIDES the parameter list that may be specified in the object definition
             for the given key. There are also a lot of rarely used reflection options that can be specified.</p>
             </remarks>
            
             <param name="activationAttributes">Activation attributes (see .NET documentation).</param>
             <param name="appBasePath">
             The base directory that the assembly resolver uses to probe for assemblies (see .NET documentation).
             </param>
             <param name="appRelativeSearchPath">
             The path relative to the base directory where the assembly resolver should probe
             for private assemblies (see .NET documentation).
             </param>
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members, and
             retrieval of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the
             type constructor (see .NET documentation).
             </param>
             <param name="callConvention">
             The CallingConventions flags that specifies the set of rules to use regarding the order
             and layout of arguments, how the return value is passed, what registers are used for arguments,
             and the stack is cleaned up (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="key">The key for the object definition.</param>
             <param name="modifiers">
             An array of ParameterModifier objects representing the attributes associated with the
             corresponding element in the types array (see .NET documentation).
             </param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="securityAttributes">Security attributes for creation authorization (see .NET doc).</param>
             <param name="shadowCopyFiles">
             If true, a shadow copy of an assembly is loaded into this application domain (see .NET documentation).
             </param>
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or
             could signal an implementation specific problem (missing property, parse error, etc).
             </exception>
             <exception cref="T:System.ArgumentNullException">If the key argument is null.</exception>
             <exception cref="T:System.ArgumentException">If the key argument is empty string.</exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.GetDefinition(System.String)">
             <summary>
             <p>Retrieves the object definition info with the given key from a definition source.</p>
             </summary>
            
             <remarks>
             <p>This method is abstract and each subclass will implement it differently.
             A configuration file based implementation will look into configuration files.
             A database implementation will look into database tables and so on.
             The definition info will be returned into an ObjectDefinition.</p>
             </remarks>
            
             <p>
             <i>Version 1.2 : </i> Visibility of GetDefinition(string) is changed to public from protected.
             </p>
            
             <param name="key">The key to use.</param>
            
             <returns>The object definition info.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps any implementation specific exceptions that may occur while retrieving the definition
             info but may also indicate incomplete definition info (missing type name), parsing errors
             if the source uses string representations or some other implementation specific errors.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the key is null.</exception>
             <exception cref="T:System.ArgumentException">If the key is empty.</exception>
             <since>1.1</since>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.ApplyMethodCall(System.Object,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition)">
             <summary>
             <p>Applies the given method definition to the given object.</p>
             </summary>
            
             <remarks>
             <p>This method will invoke either the method specified by the definition,
             or set the property specified by the definition.</p>
             </remarks>
            
             <param name="applyMethodsTo">The object to invoke the method on.</param>
             <param name="methodCallDefinition">The definition of the method to invoke.</param>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodInvocationException">If there is an error in invoking the method.</exception>
             <exception cref="T:System.ArgumentNullException">If any argument is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.ClearFactoryLifetimeObjects">
             <summary>
             <p>Clears all 'Factory' instantiation lifetime objects that have been loaded.</p>
             </summary>
            
             <remarks>
             <p>When an object key with the 'Factory' instantiation lifetime (which previously had
             an entry in the dictionary) is next requested, a new instance will be created.</p>
             </remarks>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.String,System.Object[],System.Object,System.Object,System.Reflection.Binder,System.Reflection.CallingConventions,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.Collections.IDictionary,System.Collections.IDictionary,System.Boolean)">
             <summary>
             <p>Dynamically creates an object using reflection.</p>
             </summary>
            
             <param name="activationAttributes">Activation attributes (see .NET documentation).</param>
             <param name="appBasePath">
             The base directory that the assembly resolver uses to probe for assemblies (see .NET documentation).
             </param>
             <param name="appRelativeSearchPath">
             The path relative to the base directory where the assembly resolver should probe
             for private assemblies (see .NET documentation).
             </param>
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members, and
             retrieval of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the
             type constructor (see .NET documentation).
             </param>
             <param name="callConvention">
             The CallingConventions flags that specifies the set of rules to use regarding the order
             and layout of arguments, how the return value is passed, what registers are used for arguments,
             and the stack is cleaned up (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="key">The key for the object definition.</param>
             <param name="modifiers">
             An array of ParameterModifier objects representing the attributes associated with the
             corresponding element in the types array (see .NET documentation).
             </param>
             <param name="actualParams">The parameter list to use (can be null or have null elements).</param>
             <param name="securityAttributes">Security attributes for creation authorization (see .NET doc).</param>
             <param name="shadowCopyFiles">
             If true, a shadow copy of an assembly is loaded into this application domain (see .NET documentation).
             </param>
             <param name="definitionOverwrited">
             A flag indicating whether the parameter/options is overwritten by user given values.
             </param>
             <param name="objectKeysSeen">
             A set store all the keys that are waiting to be solved in the chain of recursive method calls.
             </param>
             <param name="oncePerTopLevelInstantiationObjects">
             A dictionary store the loaded objects that are configured with OncePerTopLevelObject
             instantiation lifetime.
             </param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or
             could signal an implementation specific problem (missing property, parse error, etc).
             </exception>
             <exception cref="T:System.ArgumentNullException">If the key argument is null.</exception>
             <exception cref="T:System.ArgumentException">If the key argument is empty string.</exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDefinedObject(System.AppDomain,System.String,System.Object[],System.Object,System.Object,System.Reflection.Binder,System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence,System.Collections.IDictionary,System.Collections.IDictionary)">
             <summary>
             <p>Dynamically creates an object using reflection into the specified application domain.</p>
             </summary>
            
             <param name="appDomain">The application domain.</param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="activationAttributes">Activation attributes (see .NET documentation).</param>
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members, and
             retrieval of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the
             type constructor (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="ignoreCase">Should case be ignored while looking the Type.</param>
             <param name="key">The key for the object definition.</param>
             <param name="securityAttributes">Security attributes for creation authorization (see .NET doc).</param>
             <param name="objectKeysSeen">
             A set store all the keys that are waiting to be solved in the chain of recursive method calls.
             </param>
             <param name="oncePerTopLevelInstantiationObjects">
             A dictionary store the loaded objects that are configured with OncePerTopLevelObject
             instantiation lifetime.
             </param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps an implementation specific exception (SQL exception for a database implementation,
             Configuration Manager exception for a configuration file implementation, etc) or
             could signal an implementation specific problem (missing property, parse error, etc).
             </exception>
             <exception cref="T:System.ArgumentNullException">If the appDomain or key argument is null.</exception>
             <exception cref="T:System.ArgumentException">If the key argument is empty string.</exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.GenerateActualParams(TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition,System.Collections.IDictionary,System.Collections.IDictionary)">
             <summary>
             <p>Generates the actual parameters using the definition.</p>
             </summary>
            
             <remarks>
             <p>Exceptions will be promulgated.</p>
             </remarks>
            
             <param name="definition">
             The definition contains information that use to generate parameter objects.
             </param>
             <param name="objectKeysSeen">
             A set store all the keys that are waiting to be solved in the chain of recursive method calls.
             </param>
             <param name="oncePerTopLevelInstantiationObjects">
             A dictionary store the loaded objects that are configured with OncePerTopLevelObject
             instantiation lifetime.
             </param>
            
             <returns>The actual parameters array.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.ApplyMethodCall(System.Object,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition,System.Collections.IDictionary,System.Collections.IDictionary)">
             <summary>
             <p>Applies the given method definition to the given object.</p>
             </summary>
            
             <remarks>
             <p>This method will invoke either the method specified by the definition,
             or set the property specified by the definition.</p>
            
             <p>Exceptions will be promulgated.</p>
             </remarks>
            
             <param name="applyMethodsTo">The object to invoke the method on.</param>
             <param name="methodCallDefinition">The definition of the method to invoke.</param>
             <param name="objectKeysSeen">
             A set store all the keys that are waiting to be solved in the chain of recursive method calls.
             </param>
             <param name="oncePerTopLevelInstantiationObjects">
             A dictionary store the loaded objects that are configured with OncePerTopLevelObject
             instantiation lifetime.
             </param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.GenerateType(System.String,System.String,System.Boolean,System.Boolean)">
             <summary>
             <p>Generate the type of an object using the given parameters.</p>
             </summary>
            
             <param name="type">The name of the type.</param>
             <param name="assembly">The assembly using for load type.</param>
             <param name="assemblyNeeded">If the assembly is needed.</param>
             <param name="ignoreCase">Should case be considered.</param>
            
             <returns>The type after generating.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">Error occurs while getting type from assembly.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
             <summary>
             <p>Creates a new application domain with the given name, using evidence, application base path,
             relative search path, and a parameter that specifies whether a shadow copy of an assembly
             is to be loaded into the application domain. </p>
             </summary>
            
             <param name="appDomain">
             The friendly name of the domain. This friendly name can be displayed in user
             interfaces to identify the domain.
             </param>
             <param name="securityAttributes">
             Evidence mapped through the security policy to establish a top-of-stack permission set.
             </param>
             <param name="appBasePath">
             The base directory that the assembly resolver uses to probe for assemblies.
             </param>
             <param name="appRelativeSearchPath">
             The path relative to the base directory where the assembly resolver should probe for private assemblies.
             </param>
             <param name="shadowCopyFiles">
             If true, a shadow copy of an assembly is loaded into this application domain.
             </param>
            
             <returns>The newly created application domain.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">If failed to create application domain.</exception>
             <exception cref="T:System.ArgumentNullException">If appDomain is null.</exception>
             <exception cref="T:System.ArgumentException">If appDomain is empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.GetBindingFlags(System.Boolean)">
             <summary>
             <p>Gets default binding flags for method searching.</p>
             </summary>
            
             <param name="ignoreCase">Combine the flag of ignore case if true.</param>
            
             <returns>The binding flags.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.CreateObject(System.Type,System.String,System.Object[],System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo)">
             <summary>
             <p>Dynamically creates an object by a static method using reflection.</p>
             </summary>
            
             <remarks>
             <p>Exceptions will be promulgated.</p>
             </remarks>
            
             <param name="binder">
             An object that enables the binding, coercion of argument types, invocation of members,
             and retrieval of MemberInfo objects through reflection (see .NET documentation).
             </param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the type
             constructor/method (see .NET documentation).
             </param>
             <param name="culture">Culture specific information (see .NET documentation).</param>
             <param name="modifiers">
             An array of ParameterModifier objects representing the attributes associated with the
             corresponding element in the types array (see .NET documentation).
             </param>
             <param name="parameters">The parameter list to use (can be null or have null elements).</param>
             <param name="type">The type of the object to create.</param>
             <param name="methodName">The static method name used to create the object.</param>
             <param name="callConvention">
             The CallingConventions flags that specifies the set of rules to use regarding the order
             and layout of arguments, how the return value is passed, what registers are used for arguments,
             and the stack is cleaned up (see .NET documentation).
             </param>
            
             <returns>The dynamically created object.</returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             Wraps an object creation exception (reflection exception) or signals an object creation problem.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.FilterMethods(System.Type,System.String,System.Reflection.BindingFlags)">
             <summary>
             <p>Gets a list of methods that match the methodName from the given type.</p>
             </summary>
            
             <remarks>
             <p>Exceptions will be promulgated.</p>
             </remarks>
            
             <param name="type">The type.</param>
             <param name="methodName">The name of the method to search.</param>
             <param name="bindingAttr">
             A combination of zero or more bit flags that affect the search for the method.
             </param>
            
             <returns>A list of methods has the given name.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory.FilterMethods(System.Reflection.MethodBase[],System.Reflection.CallingConventions)">
             <summary>
             <p>Filters a list of methods with the CallingConventions flags.</p>
             </summary>
            
             <remarks>
             <p>Exceptions will be promulgated.</p>
             </remarks>
            
             <param name="candidates">A list of methods to filter.</param>
             <param name="callCnv">The CallingConventions flags.</param>
            
             <returns>A list of methods match the CallingConventions flags.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ModifiableObjectFactory.#ctor">
            <summary>
            The default constructor for <code>ModifiableObjectFactory</code> class.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ModifiableObjectFactory.SaveDefinition(System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition)">
            <summary>
            Saves the ObjectDefinition instance using the specific key.
            </summary>
            <param name="key">The specific key to use</param>
            <param name="definition">The ObjectDefinition instance to save</param>
            <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
            Wraps any implementation specific exceptions that may occur while saving the definition
            info but may also indicate incomplete definition info (missing type name), parsing errors
            if the source uses string representations or some other implementation specific error.
            </exception>
            <exception cref="T:System.ArgumentNullException">If the key is null or definition is null.</exception>
            <exception cref="T:System.ArgumentException">If the key is empty.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ModifiableObjectFactory.DeleteDefinition(System.String)">
             <summary>
             Deletes the ObjectDefinition instance with the specific key.
             </summary>
             <param name="key">The specific key to use</param>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             Wraps any implementation specific exceptions that may occur while deleting the definition
             info but may also indicate incomplete definition info (missing type name), parsing errors
             if the source uses string representations or some other implementation specific error.
             </exception>
             <exception cref="T:System.ArgumentNullException">If the key is null.</exception>
             <exception cref="T:System.ArgumentException">If the key is empty.</exception>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.TypedArrayPrefix">
            <summary>
            <para>Represents the prefix of typed array.</para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigNamespace">
            <summary>
            <para>
            Represents the configuration name "namespace".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigProperty">
            <summary>
            <para>
            Represents the configuration name "property".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigName">
            <summary>
            <para>
            Represents the configuration attribute name "name".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigValue">
            <summary>
            <para>
            Represents the configuration attribute name "value".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigAppDomain">
            <summary>
            <para>
            Represents the configuration attribute name "app_domain".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigAssembly">
            <summary>
            <para>
            Represents the configuration attribute name "assembly".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigParameters">
            <summary>
            <para>
            Represents the configuration attribute name "parameters".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigTypeName">
            <summary>
            <para>
            Represents the configuration attribute name "type_name".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.NullType">
            <summary>
            <para>
            Represents the type defined for a null parameter.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigNodeValue">
            <summary>
            <para>
            Represents the configuration attribute name "node_value".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigMethods">
            <summary>
            <para>
            Represents the configuration name "methods".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigParameter">
            <summary>
            <para>
            Represents the configuration name "parameter".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigType">
            <summary>
            <para>
            Represents the configuration attribute name "type".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigMethod">
            <summary>
            <para>
            Represents the configuration name "method".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigObject">
            <summary>
            <para>
            Represents the configuration name "object".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigMethodName">
            <summary>
            <para>
            Represents the configuration attribute name "method_name".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigInstantiationLifetime">
            <summary>
            <para>
            Represents the configuration attribute name "instantiation_lifetime".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigIgnoreCase">
            <summary>
            <para>
            Represents the configuration attribute name "ignore_case".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigIsProperty">
            <summary>
            <para>
            Represents the configuration attribute name "is_property".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.supportedTypes">
            <summary>
            <para>Represents a dictionary holding parameter types, initialized in the static constructor.</para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ObjectAttributes">
            <summary>
            <para>
            Represents the configuration attribute names of the attributes of object attributes.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.MethodAttributes">
            <summary>
            <para>
            Represents the configuration attribute names of the attributes of method attributes.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.configuration">
             <summary>
             <para>
             Represents the <see cref="T:TopCoder.Configuration.IConfiguration"/> instance that is used as the
             object source in this class.
             </para>
             </summary>
            
             <remarks>
             <para>
             Object Factory will get the object definition from this IConfiguration instance.
             </para>
            
             <para>
             This instance is initialized in the constructor. It is never null and its
             reference is not changed after initialization. It is used in <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetDefinition(System.String)"/>,
             <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveDefinition(System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition)"/> and <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.DeleteDefinition(System.String)"/> methods to maintain the
             object definitions. It can be get through property getter <see cref="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.Configuration"/>.
             </para>
             </remarks>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.configurationType">
             <summary>
             <para>
             Represents the configuration hierarchical structure type of this object source.
             </para>
             </summary>
            
             <remarks>
             <para>
             There are two kinds of hierarchical structure in this component - FLAT and NESTED.
             </para>
            
             <para>
             This value is initialized in the constructor. It is default to be
             ConfigurationType.NESTED if not provided in the constructor.
             </para>
            
             <para>
             This is enumeration value that can only be ConfigurationType.FLAT
             and ConfigurationType.NESTED.
             </para>
            
             <para>
             This value is used in <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetDefinition(System.String)"/>, <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveDefinition(System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition)"/>
             and <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.DeleteDefinition(System.String)"/> methods to determine the processing of object
             definitions.
             </para>
             </remarks>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.#cctor">
            <summary>
            <para>
            Static constructor, fills the types dictionary.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.#ctor(TopCoder.Configuration.IConfiguration)">
             <summary>
             <para>
             Creates a new instance with the given configuration.
             </para>
             </summary>
            
             <remarks>
              The configuration type is set to the default value - ConfigurationType.NESTED.
             </remarks>
            
             <param name="configuration">
             The IConfiguration instance that is used as the object source in this class. Can't be null.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             If the configuration is null.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.#ctor(TopCoder.Configuration.IConfiguration,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationType)">
             <summary>
             <para>
             Creates a new instance with the given configuration and configuration type.
             </para>
             </summary>
            
             <param name="configuration">
             The IConfiguration instance that is used as the object source in this class. Can't be null.
             </param>
             <param name="configurationType">
             The configuration hierarchical structure type of this object source.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             If the configuration is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the value is not a pre-defined ConfigurationType value.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetDefinition(System.String)">
             <summary>
             <para>
             Retrieves the object definition info with the given key from
             <see cref="T:TopCoder.Configuration.IConfiguration"/> object source.
             </para>
             </summary>
            
             <remarks>
             <para>
             The hierarchical structure of <see cref="T:TopCoder.Configuration.IConfiguration"/> contains FLAT
             and NESTED types. The FLAT hierarchical structure is nearly the same with
             the configuration parameters in <b>ConfigurationObjectFactory</b>
             And the NESTED hierarchical structure makes full use of nested property
             in Configuration API component and is better structured and more readable.
             </para>
             </remarks>
            
             <param name="key">
             The key to use. Can't be null or empty.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             If the key is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the key an empty string.
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also indicate
             incomplete definition info (missing type name), parsing errors if the source
             uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetFlatDefinition(System.String)">
             <summary>
             <para>
             Retrieves the object definition info with the given key from
             FLAT IConfiguration object source.
             </para>
             </summary>
            
             <remarks>
             <para>
             The FLAT hierarchical structure is nearly the same with the configuration
             parameters in <b>ConfigurationObjectFactory</b>.
             </para>
             </remarks>
            
             <param name="key">
             The key to use. Can't be null or empty.
             </param>
            
             <returns>
             The object definition info.
             </returns>
            
             <exception cref="T:System.ArgumentNullException">
             If the key is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the key is an empty string.
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also indicate
             incomplete definition info (missing type name), parsing errors if the source
             uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetNestedDefinition(System.String)">
             <summary>
             <para>
             Retrieves the object definition info with the given key from
             NESTED IConfiguration object source.
             </para>
             </summary>
            
             <remarks>
             <para>
             The NESTED hierarchical structure makes full use of nested
             property in Configuration API component and is better structured
             and more readable.
             </para>
             </remarks>
            
             <param name="key">
             The key to use. Can't be null or empty.
             </param>
            
             <returns>
             The object definition info.
             </returns>
            
             <exception cref="T:System.ArgumentNullException">
             If the key is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the key is an empty string.
             </exception>
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also
             indicate incomplete definition info (missing type name), parsing errors if the
             source uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveDefinition(System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition)">
             <summary>
             <para>
             Saves the specified object definition in <see cref="T:TopCoder.Configuration.IConfiguration"/>
             object with the specified key.
             </para>
             </summary>
            
             <remarks>
             <para>
             If an object with the same key already exists, the old definition will be overwritten.
             </para>
            
             <para>
             The structure used to save the definition depends on <see cref="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigurationType"/>.
             </para>
             </remarks>
            
             <param name="key">
             The key to use. Can't be null or empty.
             </param>
             <param name="definition">
             The definition to be saved.
             </param>
            
             <returns>
             The object definition info.
             </returns>
            
             <exception cref="T:System.ArgumentNullException">
             If the key or definition is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the key is an empty string.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.DeleteDefinition(System.String)">
             <summary>
             <para>
             Deletes the object definition with the specified key from the
             <see cref="T:TopCoder.Configuration.IConfiguration"/> object.
             </para>
             </summary>
            
             <remarks>
             <para>
             If the specified object definition doesn't exist, does nothing.
             </para>
             </remarks>
            
             <param name="key">
             The key of the object definition to be removed.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             If the key is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the key is an empty string.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveNestedObjectDefinition(System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition)">
             <summary>
             <para>
             Saves the given object definition in NESTED hierarchical structure.
             </para>
             </summary>
            
             <param name="key">
             The key of the object definition.
             </param>
             <param name="definition">
             The object definition to be saved.
             </param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveNestedMethodDefinition(TopCoder.Configuration.IConfiguration,System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition)">
             <summary>
             <para>
             Saves the given method definition in NESTED hierarchical structure.
             </para>
             </summary>
            
             <param name="name">
             The method unique name.
             </param>
             <param name="definition">
             The method definition to be saved.
             </param>
             <param name="parent">
             The methods configuration.
             </param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveNestedParameters(TopCoder.Configuration.IConfiguration,System.String[],System.Object[])">
             <summary>
             <para>
             Saves the given parameters in NESTED hierarchical structure.
             </para>
             </summary>
            
             <param name="types">
             The parameter types.
             </param>
             <param name="values">
             The parameter values.
             </param>
             <param name="parent">
             The object configuration.
             </param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ToStringArray(System.Array)">
             <summary>
             <para>
             Converts the given array into string array.
             </para>
             </summary>
            
             <param name="array">
             The array to convert.
             </param>
            
             <returns>
             The string array.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.AddNewNestedConfig(TopCoder.Configuration.IConfiguration,System.String,System.Object[])">
             <summary>
             <para>
             Adds a new nested configuration node with given name and values
             </para>
             </summary>
            
             <param name="parent">
             The parent configuration of the new node.
             </param>
             <param name="name">
             The name of the new configuration.
             </param>
             <param name="values">
             The values of the new configuration.
             </param>
            
             <returns>
             The configuration created.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.AddNewFlatConfig(TopCoder.Configuration.IConfiguration,System.Int32,System.String,System.Object[])">
             <summary>
             <para>
             Adds a new flat configuration node with given name attribute and values
             </para>
             </summary>
            
             <param name="parent">
             The parent configuration of the new node.
             </param>
             <param name="name">
             The name of the new configuration.
             </param>
             <param name="values">
             The values of the new configuration.
             </param>
             <param name="propertyIndex">
             The index of the new node.
             </param>
            
             <returns>
             The configuration created.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.AddRootConfig(System.String,System.String)">
             <summary>
             <para>
             Add a configuration into the root configuration.
             </para>
             </summary>
            
             <remarks>
             The name is the the "prefix_number".
             </remarks>
            
             <param name="prefix">
             The prefix of the configuration name.
             </param>
             <param name="name">
             The name attributes of the configuration.
             </param>
            
             <returns>
             The configuration created.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetNextConfigName(TopCoder.Configuration.IConfiguration,System.String)">
             <summary>
             <para>
             Gets the next available configuration name.
             </para>
             </summary>
            
             <param name="config">
             The parent configuration of the new name.
             </param>
             <param name="prefix">
             The prefix of the name.
             </param>
            
             <returns>
             The next available configuration name.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.CreateObjectDefinition(TopCoder.Configuration.IConfiguration)">
             <summary>
             <para>
             Retrieves the object definition from given configuration.
             </para>
             </summary>
            
             <param name="config">
             The configuration to read.
             </param>
            
             <returns>
             The object definition created.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also indicate
             incomplete definition info (missing type name), parsing errors if the source
             uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetMethodDefinition(TopCoder.Configuration.IConfiguration)">
             <summary>
             <para>
             Retrieves the method definition from given configuration.
             </para>
             </summary>
            
             <param name="paramsConfig">
             The configuration to read.
             </param>
            
             <returns>
             The method definition created.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also indicate
             incomplete definition info (missing type name), parsing errors if the source
             uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetParameters(TopCoder.Configuration.IConfiguration,System.String[]@,System.Object[]@)">
             <summary>
             <para>
             Retrieves the parameters from given configuration.
             </para>
             </summary>
            
             <param name="paramsConfig">
             The configuration to read.
             </param>
             <param name="paramTypes">
             The parameter types read.
             </param>
             <param name="paramValues">
             The parameter values read.
             </param>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also indicate
             incomplete definition info (missing type name), parsing errors if the source
             uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConvertObjectDefinition(System.String)">
             <summary>
             <para>
             Converts the object configuration in FLAT structure into NESTED structure.
             </para>
             </summary>
            
             <param name="key">
             The key of the object definition.
             </param>
            
             <returns>
             The object configuration in NESTED structure.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also indicate
             incomplete definition info (missing type name), parsing errors if the source
             uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConvertMethodsConfig(System.String,TopCoder.Configuration.IConfiguration)">
             <summary>
             <para>
             Converts the method configuration in FLAT structure into NESTED structure.
             </para>
             </summary>
            
             <param name="objectKey">
             The key of the object definition.
             </param>
             <param name="methodsConfig">
             The method configuration in FLAT structure.
             </param>
            
             <returns>
             The method configuration in NESTED structure.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also indicate
             incomplete definition info (missing type name), parsing errors if the source
             uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConvertParametersConfig(System.String)">
             <summary>
             <para>
             Converts the parameters configuration in FLAT structure into NESTED structure.
             </para>
             </summary>
            
             <param name="key">
             The key of the parameters definition.
             </param>
            
             <returns>
             The parameters configuration in NESTED structure.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If exceptions occur while retrieving the definition info, but may also indicate
             incomplete definition info (missing type name), parsing errors if the source
             uses string representations or some other errors.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConvertConfigNode(TopCoder.Configuration.IConfiguration,System.String)">
             <summary>
             <para>
             Converts a property-value configuration into NESETED structure.
             </para>
             </summary>
            
             <param name="config">
             The property configuration with values child.
             </param>
             <param name="name">
             The name of the new node.
             </param>
            
             <returns>
             The NESTED configuration created.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetChildrenValues(TopCoder.Configuration.IConfiguration)">
             <summary>
             <para>
             Reads all values in a property configuration.
             </para>
             </summary>
            
             <param name="config">
             The configuration to read.
             </param>
            
             <returns>
             The values.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetBooleanFromChild(TopCoder.Configuration.IConfiguration,System.String)">
             <summary>
             <para>
             Reads a bool from the child of the given configuration.
             </para>
             </summary>
            
             <param name="config">
             The configuration to read.
             </param>
             <param name="childName">
             The child name.
             </param>
            
             <returns>
             The bool value, false if not found.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If failed to parse the value.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetSimpleValueFromChild(TopCoder.Configuration.IConfiguration,System.String,System.Boolean)">
             <summary>
             <para>
             Gets a value from a property configuration.
             </para>
             </summary>
            
             <param name="config">
             The configuration to read.
             </param>
             <param name="childName">
             The child name.
             </param>
             <param name="mandatory">
             Whether the value is mandatory.
             </param>
            
             <returns>
             The value read.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If the value is missing and it is mandatory.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetSimpleAttribute(TopCoder.Configuration.IConfiguration,System.String,System.Boolean)">
             <summary>
             <para>
             Gets an attribute value from a configuration.
             </para>
             </summary>
            
             <param name="config">
             The configuration to read.
             </param>
             <param name="attrName">
             The attribute name.
             </param>
             <param name="mandatory">
             Whether the value is mandatory.
             </param>
            
             <returns>
             The value read.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If the value is missing and it is mandatory.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetChildByName(TopCoder.Configuration.IConfiguration,System.String,System.String,System.Boolean)">
             <summary>
             <para>
             Gets a configuration with specified name.
             </para>
             </summary>
            
             <param name="config">
             The configuration to read.
             </param>
             <param name="nodePrefix">
             The prefix of the configuration.
             </param>
             <param name="name">
             The name to search.
             </param>
             <param name="mandatory">
             Whether the configuration is mandatory.
             </param>
            
             <returns>
             The configuration retrieved.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If multiple configuration found of the configuration is missing and it is mandatory.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.IsNameMatch(TopCoder.Configuration.IConfiguration,System.String)">
             <summary>
             <para>
             Checks whether the configuration is matched with specified name.
             </para>
             </summary>
            
             <param name="config">
             The configuration to check.
             </param>
             <param name="name">
             The expected name attribute value.
             </param>
            
             <returns>
             Whether the configuration is matched with specified name.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.IsNodeMatch(System.String,System.String)">
             <summary>
             <para>
             Checks whether the configuration name is matched with specified prefix.
             </para>
             </summary>
            
             <param name="node">
             The configuration name
             </param>
             <param name="prefix">
             The expected prefix.
             </param>
            
             <returns>
             Whether the configuration name is matched with specified prefix.
             </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.FormatTypeName(System.String)">
             <summary>
             <para>Trims the name of the type by removing blanks and spaces.</para>
             </summary>
            
             <param name="typeName">The string denotes the name of the type.</param>
            
             <returns>The name of the type after trimmed .</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.RetrieveType(System.String@,System.String@)">
             <summary>
             <para>Retrieves the type from the given type name.</para>
             </summary>
            
             <remarks>
             <para>The type name will be trimmed  by removing blanks and spaces.</para>
             </remarks>
            
             <param name="typeName">The string denotes the name of the type.</param>
            
             <param name="elementTypeName">
             The type name of the element if the given type represents typed array,
             otherwise, will be set to null.
             </param>
            
             <returns>The real type parsed from the type name.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConvertValue(System.Type,System.String)">
             <summary>
             <para>
             Converts value with the given type.
             </para>
             </summary>
            
             <param name="type">
             The given type.
             </param>
             <param name="value">
             The value which is needed to parse.
             </param>
             <returns>
             The object after parsed.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             if any parsing error found.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConvertValue(System.Type,System.Object[])">
             <summary>
             <para>
             Converts value with the given type.
             </para>
             </summary>
            
             <param name="type">
             The given type.
             </param>
             <param name="values">
             The value array which is needed to parse.
             </param>
             <returns>
             The object after parsed.
             </returns>
            
             <exception cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             If any parsing error found.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ValidateNotNull(System.Object,System.String)">
             <summary>
             <para>
             Checks if parameter is null and throw proper exception.
             </para>
             </summary>
            
             <param name="param">
             The parameter.
             </param>
             <param name="name">
             The parameter name.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             If param is null.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ValidateNotNullOrEmpty(System.String,System.String)">
             <summary>
             <para>
             Checks if parameter is null or an empty string and throw proper exception.
             </para>
             </summary>
            
             <param name="param">
             The parameter.
             </param>
             <param name="name">
             The parameter name.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             If param is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If param is an empty string.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveFlatParameters(System.String,System.String[],System.Object[])">
             <summary>
             <para>
             Saves the parameters types and values into FLAT structure.
             </para>
             </summary>
            
             <param name="nameSpace">
             The namespace of the configuration.
             </param>
             <param name="types">
             The parameter types.
             </param>
             <param name="values">
             The parameters values.
             </param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveFlatMethodDefinition(System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition)">
             <summary>
             <para>
             Saves the method definition into FLAT structure.
             </para>
             </summary>
            
             <param name="nameSpace">
             The namespace of the configuration.
             </param>
             <param name="definition">
             The method definition to be saved.
             </param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.SaveFlatObjectDefinition(System.String,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition)">
             <summary>
             <para>
             Saves the object definition into FLAT structure.
             </para>
             </summary>
            
             <param name="nameSpace">
             The namespace of the configuration.
             </param>
             <param name="definition">
             The object definition to be saved.
             </param>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.Configuration">
             <summary>
             <para>
             Gets the <see cref="T:TopCoder.Configuration.IConfiguration"/> instance that is used as the
             object source in this class.
             </para>
             </summary>
            
             <value>
             The <see cref="T:TopCoder.Configuration.IConfiguration"/> instance that is used as the
             object source in this class.
             </value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigurationType">
             <summary>
             <para>
             Gets the configuration hierarchical structure type of this object source.
             </para>
             </summary>
            
             <value>
             The configuration hierarchical structure type of this object source.
             </value>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigurationComparer">
             <summary>
             <para>
             An <see cref="T:System.Collections.IComparer"/> implementation used to sort configuration.
             </para>
             </summary>
            
             <threadsafety>
             This class is immutable and thread safe.
             </threadsafety>
            
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.ConfigurationComparer.Compare(System.Object,System.Object)">
             <summary>
             <para>
             Compare two configuration based on name.
             </para>
             </summary>
            
             <param name="x">
             A configuration.
             </param>
             <param name="y">
             The other configuration.
             </param>
            
             <returns>
             Comparison result.
             </returns>
            
             <exception>
             The exceptions will be promulgated if any parsing errors occurred.
             </exception>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException">
             <summary>
             <para>
             This exception extends ObjectSourceException to indicate the <see cref="T:TopCoder.Configuration.IConfiguration"/>
             object source is invalid (For example, missing required node).
             </para>
             </summary>
            
             <remarks>
             <para>
             This exception is thrown by <see cref="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPIObjectFactory.GetDefinition(System.String)"/>
             method when exception occurs whiling getting the object definition.
             </para>
             </remarks>
            
             <threadsafety>
             This class is derived from thread unsafe class and it is not thread safe.
             </threadsafety>
            
             <author>justforplay</author>
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException">
             <summary>
             <p>Exception used to signal object definition retrieval related problems. </p>
             </summary>
            
             <remarks>
             <p>It is used to wrap any exceptions thrown while a specific <see cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory"/>
             implementation encounters while retrieving object definitions given the key.</p>
            
             <p>A Configuration Manager implementation will wrap configuration exceptions,
             a database implementation will wrap SQL exceptions and so on.</p>
            
             <p>This class extends ObjectCreationException because as the user is concerned,
             an object definition retrieval exception is still an object creation problem.</p>
            
             <p>Thread Safety:
             This class is derived from thread unsafe class and it is not thread safe.</p>
             </remarks>
            
             <author>adic</author>
             <author>LittleBlack</author>
             <author>aubergineanode</author>
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException">
             <summary>
             <p>Exception used to signal object creation related problems.</p>
             </summary>
            
             <remarks>
             <p>It is used to wrap any exceptions thrown while working with assemblies,
             types and invocations (reflection related). This may include I/O exceptions
             while loading assemblies.</p>
            
             <p>Thread Safety:
             This class is derived from thread unsafe class and it is not thread safe.</p>
             </remarks>
            
             <author>adic</author>
             <author>LittleBlack</author>
             <author>aubergineanode</author>
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException.#ctor">
            <summary>
            <p>Initializes a new instance of the ObjectCreationException class.</p>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException.#ctor(System.String)">
             <summary>
             <p>Initializes a new instance of the ObjectCreationException class with
             a specified error message.</p>
             </summary>
            
             <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException.#ctor(System.String,System.Exception)">
             <summary>
             <p>Initializes a new instance of the ObjectCreationException class
             with a specified error message and a reference to
             the inner exception that is the cause of this exception.</p>
             </summary>
            
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             <p>Initializes a new instance of the ObjectCreationException class with serialized data.</p>
             </summary>
            
             <param name="info">The object that holds the serialized object data.</param>
             <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException.#ctor">
            <summary>
            <p>Initializes a new instance of the ObjectSourceException class.</p>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException.#ctor(System.String)">
             <summary>
             <p>Initializes a new instance of the ObjectSourceException class with
             a specified error message.</p>
             </summary>
            
             <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException.#ctor(System.String,System.Exception)">
             <summary>
             <p>Initializes a new instance of the ObjectSourceException class
             with a specified error message and a reference to
             the inner exception that is the cause of this exception.</p>
             </summary>
            
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectSourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             <p>Initializes a new instance of the ObjectSourceException class with serialized data.</p>
             </summary>
            
             <param name="info">The object that holds the serialized object data.</param>
             <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException.#ctor">
            <summary>
            <para>Initializes a new instance of the ConfigurationAPISourceException class.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException.#ctor(System.String)">
             <summary>
             <para>Initializes a new instance of the ConfigurationAPISourceException class with
             a specified error message.</para>
             </summary>
            
             <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException.#ctor(System.String,System.Exception)">
             <summary>
             <para>Initializes a new instance of the ConfigurationAPISourceException class
             with a specified error message and a reference to
             the inner exception that is the cause of this exception.</para>
             </summary>
            
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationAPISourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             <para>Initializes a new instance of the ConfigurationAPISourceException class with serialized data.</para>
             </summary>
            
             <param name="info">The object that holds the serialized object data.</param>
             <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationType">
             <summary>
             <para>
             This is enumeration of configuration hierarchical structure type.
             </para>
             </summary>
            
             <remarks>
             <para>
             There are two kinds of hierarchical structure in <see cref="T:TopCoder.Configuration.IConfiguration"/>
             that are supported by this class.
             </para>
            
             <para>
             The first one is FLAT hierarchical structure, which is nearly the same with
             the structure of configuration file in <b>ConfigurationObjectFactory</b>
             which uses ConfigManager to load the configuration source from file, except
             that the node text is changed to be attribute value of "node_value" attribute
             (I.e. <c>&lt;value&gt;[node text]&lt;/value&gt;</c> is changed to be
             <c>&lt;value_n node_value = "[node text]" /&gt;</c>, because the <see cref="T:TopCoder.Configuration.IConfiguration"/>
             doesn't have the "node text" concept).
             </para>
            
             <para>
             Another is NESTED hierarchical structure, which is newly defined in this component
             to fully use the nested property of Configuration API component. NESTED hierarchical
             structure is encouraged for newly designed/developed component in that it is better
             structured and more readable.
             </para>
             </remarks>
            
             <threadsafety>
             Enumeration is thread safe.
             </threadsafety>
            
             <author>justforplay</author>
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationType.Flat">
            <summary>
            <para>Represents the FLAT hierarchical structure, which is nearly the same
            with the structure of configuration file in <b>ConfigurationObjectFactory</b>
            which uses ConfigManager to load the configuration source from file.</para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ConfigurationType.Nested">
             <summary>
             <para>Represents the NESTED hierarchical structure, which is newly defined in this
             component to fully use the nested property of Configuration API component.</para>
             </summary>
            
             <remarks>
             This NESTED structure is encouraged to be used if not for the reuse of
             pre-existed configuration file that is designed to be loaded using.
             </remarks>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper">
             <summary>
             <p>Defines helper methods and constants used in this component.</p>
             </summary>
            
             <remarks>
             <p>Thread Safety:
             All static methods are thread safe.</p>
             </remarks>
            
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c)2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.TypedArrayPrefix">
            <summary>
            <p>Represents the prefix of typed array.</p>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.supportedTypes">
            <summary>
            <p>Represents a dictionary holding parameter types, initialized in the static constructor.</p>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.#ctor">
            <summary>
            <p>Private constructor.</p>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.#cctor">
            <summary>
            <p>Static constructor, fills the types dictionary.</p>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.IsPrimitiveOrString(System.Type)">
             <summary>
             <p>Check if the given type is primitive data type or string.</p>
             </summary>
            
             <param name="type">The type to check.</param>
            
             <returns>True if the given type is primitive data type or string, otherwise false.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.IsPrimitiveOrStringArray(System.Type)">
             <summary>
             <p>Check if the given type is array of primitive data type or string.</p>
             </summary>
            
             <param name="type">The type to check.</param>
            
             <returns>True if the given type is array of primitive data type or string, otherwise false.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.RetrieveType(System.String@,System.String@)">
             <summary>
             <p>Retrieves the type from the given type name.</p>
             </summary>
            
             <remarks>
             <p>The type name will be trimmed  by removing blanks and spaces.</p>
             </remarks>
            
             <param name="typeName">The string denotes the name of the type.</param>
            
             <param name="elementTypeName">
             The type name of the element if the given type represents typed array,
             otherwise, will be set to null.
             </param>
            
             <returns>The real type parsed from the type name.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.ValidateNotNull(System.Object,System.String)">
             <summary>
             <p>Check if parameter is null and throw proper Exception.</p>
             </summary>
            
             <param name="param">Parameter.</param>
             <param name="name">Parameter name.</param>
            
             <exception cref="T:System.ArgumentNullException">If param is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.ValidateNotNullOrEmpty(System.String,System.String)">
             <summary>
             <p>Check if parameter is null or an empty string and throw proper Exception.</p>
             </summary>
            
             <param name="param">Parameter.</param>
             <param name="name">Parameter name.</param>
            
             <exception cref="T:System.ArgumentNullException">If param is null.</exception>
             <exception cref="T:System.ArgumentException">If param is an empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.Helper.FormatTypeName(System.String)">
             <summary>
             <p>Trims the name of the type by removing blanks and spaces.</p>
             </summary>
            
             <param name="typeName">The string denotes the name of the type.</param>
            
             <returns>The name of the type after trimmed .</returns>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.InstantiationLifetime">
             <summary>
             <p>This enumeration defines values that control how long an <see cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory"/>
             instance holds on to (and uses) the object created for a single key.</p>
             </summary>
            
             <remarks>
             <p>This allows the same object instance to appear multiple times in the
             object graph generated through nested object instantiations.</p>
            
             <p>Thread Safety:
             Enumerations are thread safe.</p>
             </remarks>
            
             <author>aubergineanode</author>
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.InstantiationLifetime.Factory">
             <summary>
             <p>Instantiation lifetime that specifies that the object should only be
             created once during the lifetime of the Object Factory (or until the
             factoryLifetimeObjects map is cleared).</p>
            
             <p>Future requests for the same key will return the object instance
             created on the first request for the key.</p>
             </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.InstantiationLifetime.OncePerTopLevelObject">
             <summary>
             <p>Instantiation lifetime that specifies that the object for the key should
             only be created once per application call to the CreateDefinedObject method.</p>
            
             <p>If the object for the key is needed more than once in the tree of complex object
             instantiations (includes both constructors and methods), then the same instance of the
             object will be used in all instances. However, on the next application call to
             for the object with that key, a new instance will be instantiated.</p>
             </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.InstantiationLifetime.Instance">
            <summary>
            <p>Instantiation lifetime that specifies that a new object should be created
            every time the object for the key is requested.</p>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition">
             <summary>
             <p>This is a data class that is used to store object definition data for
             method/property invocations.</p>
             </summary>
            
             <p>
             <i>Version 1.2 : </i>
             The setter for the <code>IsProperty</code> property is added.
             The getter/setter for <code>MethodName</code> property is added.
             </p>
            
             <remarks>
             <p> It is defined because the definition data contains a large set of information.
             That way the exchange of information between the <see cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory"/> methods and its
             implementations are simplified.</p>
            
             <p>This class represents the invocation of a method/property.</p>
            
             <p>The contained information is: method name, whether the method name is case sensitive,
             whether the item to invoke is a property or a method, parameter types and values.
             Some of these data is stored in the base class.</p>
            
             <p>Thread Safety:
             The class is mutable so it is not thread safe.</p>
             </remarks>
            
             <author>aubergineanode</author>
             <author>nebula.lam</author>
             <author>TCSDEVELOPER</author>
             <version>1.2</version>
             <since>1.1</since>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition">
             <summary>
             <p>This is a data class that is used to store object definition data that
             is common to constructor and method/property invocations.</p>
             </summary>
            
             <p>Version 1.2: The setter for the each property is added except <code>ParamTypes</code> and <code>
             ParamValues</code>.
             For <code>ParamTypes</code> and <code>ParamValues</code> properties, a set of operations
             AddParam/RemoveParam/InsertParam/RemoveAtParam are added to set them at the same time.
             </p>
            
             <remarks>
             <p> It is defined because the definition data contains a large set of information.
             That way the exchange of information between the <see cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory"/> methods
             and its implementations are simplified.</p>
            
             <p>The contained information is: method name, whether the method name is case sensitive,
             parameter types and values.</p>
            
             <p>Thread Safety:
             The class is mutable so it is not thread safe.</p>
             </remarks>
            
             <author>aubergineanode</author>
             <author>nebula.lam</author>
             <author>TCSDEVELOPER</author>
             <version>1.2</version>
             <since>1.1</since>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.methodName">
             <summary>
             <p>Represents the name of the method to invoke.</p>
             </summary>
            
             <remarks>
             <p>In the case of ObjectDefinition, this will be the name of the static method
             that creates the object (may be null if a constructor is used).</p>
            
             <p>In the case of MethodCallDefinition, this will be the name of the
             method/property to invoke (can not be null).</p>
            
             <p>Initialized in the constructor. Used by the property getter/setter.</p>
             </remarks>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.ignoreCase">
             <summary>
             <p>Represents a flag indicates whether to ignore the case sensitivity when
             looking up the method name (and static method name, for ObjectDefinition).</p>
             </summary>
            
             <remarks>
             <p>Initialized in the constructor. Used by the property getter/setter.</p>
             </remarks>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.paramTypes">
             <summary>
             <p>Represents the parameter types for the creation of the type.</p>
             </summary>
            
             <p>
             Version 1.2: Change the underlying implementation to <code>IList</code>.
             </p>
            
             <remarks>
             <p>Can be empty (means no arguments are used) but can't be null. Must have the same number
             of elements as paramValues. Cannot have null elements.</p>
            
             <p>Elements can be bool, sbyte, byte, short, ushort, int, uint, long, ulong, char,
             float, double, string, object with [] as optional suffix (used for arrays) but can
             be any type if specified.</p>
            
             <p>In the case of object[], the type of the array can follow.</p>
            
             </remarks>
             <since>1.1</since>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.paramValues">
             <summary>
             <p>Represents the parameter values for the creation of the type.</p>
             </summary>
            
             <p>
             Version 1.2: Change the underlying implementation to <code>IList</code>.
             </p>
             <remarks>
             <p>Can be empty (means no arguments are used) but can't be null. Must have the same number of
             elements as paramTypes. Can have null elements, but they must correspond to "null" entries
             in the paramTypes array.</p>
            
             <p>For the simple types and strings the elements represent the actual values. For objects,
             the elements are the key (string) that can be used to create that object (see sample config
             file for an example). For array types, the elements are arrays with elements following the
             two rules above. In the case of object[], the type of the array can follow.</p>
            
             </remarks>
             <since>1.1</since>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.SetParamTypesAndParamValues(System.String[],System.Object[])">
             <summary>
             The helper method to set the <code>ParamTypes</code> and <code>ParamValues</code> properties.
             </summary>
             <param name="paramTypes">The types of the parameters for the constructor/method (can be null).</param>
             <param name="paramValues">The values of the parameters for the constructor/method (can be null).</param>
            
             <exception cref="T:System.ArgumentException">
             If the paramTypes and paramValues arrays don't have the same size and aren't both null or
             if paramTypes has invalid values (see ParamTypes), or if a null entry in paramValues does not
             correspond to a "null" entry in paramTypes.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             If an array element (besides an element in paramValues corresponding to a paramType of "null") is null.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.#ctor(System.Boolean,System.String[],System.Object[],System.String)">
             <summary>
             <p>Creates a new instance of ObjectPartDefinition.</p>
             </summary>
            
             <p>
             Version 1.2: Move parameter verification to property setter and
             <code>SetParamTypesAndParamValues(string[], object[])</code>.
             </p>
            
             <param name="ignoreCase">
             False for case sensitive lookup, true for case insensitive lookup of the method name.
             </param>
             <param name="paramTypes">The types of the parameters for the constructor/method (can be null).</param>
             <param name="paramValues">
             The values of the parameters for the constructor/method (can be null).
             </param>
             <param name="methodName">
             The name of the method to invoke (for ObjectDefinition, this is the name of the static
             method to use) (can be null, but not the empty string).
             </param>
            
             <exception cref="T:System.ArgumentException">
             If the paramTypes and paramValues arrays don't have the same size and aren't both null or
             if paramTypes has invalid values (see ParamTypes), or if a null entry in paramValues does not
             correspond to a "null" entry in paramTypes or methodName is the empty string.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             If an array element (besides an element in paramValues corresponding to a paramType of "null") is null.
             </exception>
             <since>1.1</since>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.#ctor(System.Boolean,System.String[],System.Object[])">
             <summary>
             <p>Creates a new instance of ObjectPartDefinition.</p>
             </summary>
            
             <param name="ignoreCase">
             False for case sensitive lookup, true for case insensitive lookup of the method name.
             </param>
             <param name="paramTypes">The types of the parameters for the constructor/method (can be null).</param>
             <param name="paramValues">
             The values of the parameters for the constructor/method (can be null).
             </param>
            
             <exception cref="T:System.ArgumentException">
             If the paramTypes and paramValues arrays don't have the same size and aren't both null or
             if paramTypes has invalid values (see ParamTypes), or if a null entry in paramValues does not
             correspond to a "null" entry in paramTypes.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             If an array element (besides an element in paramValues corresponding to a paramType of "null") is null.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.AddParam(System.String,System.Object)">
            <summary>
            Adds parameter type and value pair to each list.
            </summary>
            <param name="paramType">The type of the parameter for the constructor/method (can be null).</param>
            <param name="paramValue">The value of the parameter for the constructor/method (can be null).</param>
            <exception cref="T:System.ArgumentException">
            If paramType has invalid value or if a null paramValue does not correspond to a "null" paramType.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If paramType is null.
            </exception>
            <returns>
            The position into which the new param type and value were inserted.
            </returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.RemoveParam(System.String,System.Object)">
             <summary>
             Removes parameter type and value pair from each list. The method will remove the first pair
             of param type and value if they exist.
             </summary>
             <param name="paramType">The type of the parameter for the constructor/method (can be null).</param>
             <param name="paramValue">The value of the parameter for the constructor/method (can be null).</param>
            
             <exception cref="T:System.ArgumentException">
             If paramType has invalid value or if a null paramValue does not correspond to a "null" paramType.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             If paramType is null.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.InsertParam(System.Int32,System.String,System.Object)">
             <summary>
             Inserts parameter type and value pair into each list at specified index.
             </summary>
             <param name="index">The zero-based index at which MethodCallDefinition instance should be inserted.</param>
             <param name="paramType">The type of the parameter for the constructor/method (can be null).</param>
             <param name="paramValue">The value of the parameter for the constructor/method (can be null).</param>
            
             <exception cref="T:System.ArgumentException">
             If paramType has invalid value or if a null paramValue does not correspond to a "null" paramType.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             If paramType is null.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or index is greater than Count
             of parameter type/value list</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.RemoveAtParam(System.Int32)">
             <summary>
             Removes parameter type and value pair from each list at specified index.
             </summary>
             <param name="index">The zero-based index at which MethodCallDefinition instance should be inserted.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or index is greater than or
             equal to Count of parameter type/value list</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.CheckParamTypeValue(System.String@,System.Object)">
            <summary>
            The helper method to verify the paramType and paramValue pair.
            </summary>
            <param name="paramType">The type of the parameter for the constructor/method (can be null).</param>
            <param name="paramValue">The value of the parameter for the constructor/method (can be null).</param>
            <exception cref="T:System.ArgumentException">
            If paramType has invalid value or if a null paramValue does not correspond to a "null" paramType.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If paramType is null.
            </exception>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.MethodName">
             <summary>
             <p>Property for methodName field.</p>
             </summary>
            
             <p>
             Version 1.2: The setter for this property is added.
             </p>
            
             <remarks>
             <p>In the case of ObjectDefinition, this will be the name of the static method
             that creates the object (may be null if a constructor is used).</p>
            
             <p>In the case of MethodCallDefinition, this will be the name of the
             method/property to invoke (can not be null).</p>
             </remarks>
            
             <value>The name of the method to invoke.</value>
             <exception cref="T:System.ArgumentException">if empty string is set to it</exception>
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.IgnoreCase">
             <summary>
             <p>Represents a flag indicates whether to ignore the case sensitivity when
             looking up the method name (and static method name, for ObjectDefinition).</p>
             </summary>
            
             <p>
             Version 1.2: The setter for this property is added.
             </p>
            
             <value>A flag indicates whether to ignore the case sensitivity when looking up the method name.</value>
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.ParamTypes">
             <summary>
             <p>Gets the parameter values for the creation of the type.</p>
             </summary>
            
             <p>
             Version 1.2: The method to construct string array changed.
             </p>
            
             <remarks>
             <p>Can be empty (means no arguments are used) but can't be null. Must have the same number of
             elements as paramTypes. Can have null elements, but they must correspond to "null" entries
             in the paramTypes array.</p>
            
             <p>For the simple types and strings the elements represent the actual values. For objects,
             the elements are the key (string) that can be used to create that object (see sample config
             file for an example). For array types, the elements are arrays with elements following the
             two rules above. In the case of object[], the type of the array can follow.</p>
             </remarks>
            
             <value>The parameter values for the creation of the type.</value>
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition.ParamValues">
             <summary>
             <p>Gets the parameter values for the creation of the type.</p>
             </summary>
            
             <p>
             Version 1.2: The method to construct object array changed.
             </p>
            
             <remarks>
             <p>Can be empty (means no arguments are used) but can't be null. Must have the same number of
             elements as paramTypes. Can have null elements, but they must correspond to "null" entries
             in the paramTypes array.</p>
            
             <p>For the simple types and strings the elements represent the actual values. For objects,
             the elements are the key (string) that can be used to create that object (see sample config
             file for an example). For array types, the elements are arrays with elements following the
             two rules above. In the case of object[], the type of the array can follow.</p>
             </remarks>
            
             <value>The parameter values for the creation of the type.</value>
             <since>1.1</since>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition.isProperty">
             <summary>
             <p>Represents a flag indicating whether the "method" to be invoked
             is a method or a property. True for properties, and false for methods.</p>
             </summary>
            
             <remarks>
             <p>Initialized in the constructor. Used by the property getter/setter.</p>
             </remarks>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition.#ctor(System.String,System.Boolean,System.Boolean,System.String[],System.Object[])">
             <summary>
             <p>Creates a new instance of MethodCallDefinition.</p>
             </summary>
            
             <param name="ignoreCase">
             False for case sensitive lookup, true for case insensitive lookup of the method name.
             </param>
             <param name="paramTypes">The types of the parameters for the method (can be null).</param>
             <param name="paramValues">The values of the parameters for the method (can be null).</param>
             <param name="methodName">
             The name of the method to invoke (for ObjectDefinition, this is the name of the static method to use).
             </param>
             <param name="isProperty">Whether the method is a normal method or a property.</param>
            
             <exception cref="T:System.ArgumentNullException">
             If methodName is null or an array element (besides an element in paramValues
             corresponding to a paramType of "null") is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the paramTypes and paramValues arrays don't have the same size and aren't both null or
             if paramTypes has invalid values (see ParamTypes), or if a null entry in paramValues does not
             correspond to a "null" entry in paramTypes or methodName is the empty string.
             </exception>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition.IsProperty">
             <summary>
             <p>Property for isProperty field. True for properties, and false for methods.</p>
             </summary>
            
             <p>
             <i>Version 1.2 : </i> The setter for this property is added.
             </p>
            
             <value>
             A flag indicating whether the "method" to be invoked is a method or
             a property. True for properties, and false for methods.
             </value>
            
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition.MethodName">
             <summary>
             <p>Property for methodName field.</p>
             </summary>
            
             <remarks>
             <p>It is the name of the method/property to invoke (can not be null).</p>
             </remarks>
            
             <value>The name of the method to invoke.</value>
             <exception cref="T:System.ArgumentException">if empty string is set to it</exception>
             <exception cref="T:System.ArgumentNullException">if null string is set to it</exception>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodInvocationException">
             <summary>
             <p>Exception used to signal object creation related problems due to not
             being able to invoke a method on a created object.</p>
             </summary>
            
             <remarks>
             <p>It is used to wrap any exceptions thrown while working with method/property
             invocations (reflection related). Primarily this will include exceptions related
             to the inability to find a compatible method or invoke it.</p>
            
             <p>Thread Safety:
             This class is derived from thread unsafe class and it is not thread safe.</p>
             </remarks>
            
             <author>aubergineanode</author>
             <author>nebula.lam</author>
             <version>1.1</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodInvocationException.#ctor">
            <summary>
            <p>Initializes a new instance of the MethodInvocationException class.</p>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodInvocationException.#ctor(System.String)">
             <summary>
             <p>Initializes a new instance of the MethodInvocationException class with
             a specified error message.</p>
             </summary>
            
             <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodInvocationException.#ctor(System.String,System.Exception)">
             <summary>
             <p>Initializes a new instance of the MethodInvocationException class
             with a specified error message and a reference to
             the inner exception that is the cause of this exception.</p>
             </summary>
            
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodInvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             <p>Initializes a new instance of the MethodInvocationException class with serialized data.</p>
             </summary>
            
             <param name="info">The object that holds the serialized object data.</param>
             <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition">
             <summary>
             <p>This is a data class that is used to store object definition data.</p>
             </summary>
            
             <remarks>
             <p> It is defined because the definition data contains a large set of information.
             That way the exchange of information between the <see cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectFactory"/>  methods and its
             implementations are simplified.</p>
            
             <p>The contained information is: application domain name, assembly, type name,
             whether creation is done through a static factory method, name of the static method
             that creates the object, whether the static method name is case sensitive,
             methods will apply to the created object, instantiation lifetime of the object,
             parameter types and values.
             Some of these data is stored in the base class.</p>
            
             <p>Version 1.1: This class has been refactored so that many of the properties that were
             previously in it are now in the base <see cref="T:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectPartDefinition"/> class.</p>
            
             <p>Version 1.2: The setter for the each property is added except <code>MethodCalls</code>.
             For <code>MethodCalls</code> property, RemoveMethodCall/AddMethodCall/InsertMethodCall/RemoveAtMethodCall
             operations are added to support modification the content of methodCalls List.
             </p>
            
             <p>Thread Safety:
             The class is mutable so it is not thread safe.</p>
             </remarks>
            
             <author>adic</author>
             <author>LittleBlack</author>
             <author>aubergineanode</author>
             <author>nebula.lam</author>
             <author>TCSDEVELOPER</author>
             <version>1.2</version>
             <since>1.1</since>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.assembly">
             <summary>
             <p>Represents the assembly name. Can be null (means no assembly will be loaded).</p>
             </summary>
            
             <remarks>
             <p>Initialized in the constructor. Used by the property getter/setter.</p>
             </remarks>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.typeName">
             <summary>
             <p>Represents the type name.</p>
             </summary>
            
             <remarks>
             <p>Cannot be null.</p>
             <p>Initialized in the constructor. Used by the property getter/setter.</p>
             </remarks>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.isStatic">
             <summary>
             <p>Represents a flag indicates whether creation is done through a static factory method.</p>
             </summary>
            
             <remarks>
             <p>Initialized in the constructor. Used by the property getter/setter.</p>
             </remarks>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.methodCalls">
             <summary>
             <p>Represents the method calls that should be invoked on the created object.</p>
             </summary>
            
             <p>
             Version 1.2: Change the underlying implementation to <code>IList</code>.
             </p>
            
             <remarks>
             <p>No item in the array can be null. The field itself can be null (considered the same
             as a 0-length array, i.e. no methods should be invoked).</p>
             </remarks>
             <since>1.1</since>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.instantiationLifetime">
             <summary>
             <p>Represents the instantiation lifetime of the object, which can alter the object creation graph.</p>
             </summary>
            
             <remarks>
             <p>Initialized in the constructor. Used by the property getter/setter.</p>
             </remarks>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.appDomain">
             <summary>
             <p>The application domain name.</p>
             </summary>
            
             <remarks>
             <p>Can be null (means the current application domain is used).
             Initialized in the constructor. Used by the property getter/setter.</p>
             </remarks>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.#ctor(System.String,System.String,System.String,System.Boolean,System.String[],System.Object[])">
             <summary>
             <p>Creates a new instance of ObjectDefinition.</p>
             </summary>
            
             <param name="appDomain">The application domain (can be null or empty).</param>
             <param name="assembly">The assembly name (can be null if appDomain is null or empty).</param>
             <param name="typeName">The type name (cannot be null).</param>
             <param name="ignoreCase">
             False for case sensitive lookup, true for case insensitive lookup of the static method name.
             </param>
             <param name="paramTypes">
             The types of the parameters (can be null or empty).
             </param>
             <param name="paramValues">
             The values of the parameters (can be null or empty).
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             If typeName is null or an array element (besides an element in paramValues
             corresponding to a paramType of "null") is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the paramTypes and paramValues arrays don't have the same size and aren't both null or
             if paramTypes has invalid values (see ParamTypes), or assembly is the empty string.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.#ctor(System.String,System.String,System.String,System.Boolean,System.String[],System.Object[],TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition[],TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.InstantiationLifetime)">
             <summary>
             <p>Creates a new instance of ObjectDefinition.</p>
             </summary>
            
             <param name="appDomain">The application domain (can be null or empty).</param>
             <param name="assembly">The assembly name (can be null if appDomain is null or empty).</param>
             <param name="typeName">The type name (cannot be null).</param>
             <param name="ignoreCase">
             False for case sensitive lookup, true for case insensitive lookup of the static method name.
             </param>
             <param name="paramTypes">
             The types of the parameters (can be null or empty).
             </param>
             <param name="paramValues">
             The values of the parameters (can be null or empty).
             </param>
             <param name="methodCalls">
             The method calls definitions to be made on the object after it is create (can be null).
             </param>
             <param name="instantiationLifetime">
             InstantiationLifetime value stating the length of the lifetime of this instance.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             If typeName is null or an array element (besides an element in paramValues corresponding
             to a paramType of "null") is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the paramTypes and paramValues arrays don't have the same size and aren't both null or
             if paramTypes has invalid values (see ParamTypes), or assembly is the empty string
             or instantiationLifetime is invalid.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String[],System.Object[],TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition[],TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.InstantiationLifetime)">
             <summary>
             <p>Creates a new instance of ObjectDefinition.</p>
             </summary>
            
             <param name="appDomain">The application domain (can be null or empty).</param>
             <param name="assembly">The assembly name (can be null if appDomain is null or empty).</param>
             <param name="typeName">The type name (cannot be null).</param>
             <param name="ignoreCase">
             False for case sensitive lookup, true for case insensitive lookup of the static method name.
             </param>
             <param name="paramTypes">
             The types of the parameters (can be null or empty).
             </param>
             <param name="paramValues">
             The values of the parameters (can be null or empty).
             </param>
             <param name="methodCalls">
             The method calls definitions to be made on the object after it is create (can be null).
             </param>
             <param name="instantiationLifetime">
             InstantiationLifetime value stating the length of the lifetime of this instance.
             </param>
             <param name="methodName">The name of the static method to use to create the object.</param>
            
             <exception cref="T:System.ArgumentNullException">
             If typeName or methodName is null or an array element (besides an element in paramValues
             corresponding to a paramType of "null") is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the paramTypes and paramValues arrays don't have the same size and aren't both null or
             if paramTypes has invalid values (see ParamTypes), or assembly is the empty string
             or instantiationLifetime is invalid or methodName is empty.
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.#ctor(System.String,System.String,System.String,System.String,System.Boolean,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.InstantiationLifetime,System.String[],System.Object[],TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition[])">
             <summary>
             <p>Creates a new instance of ObjectDefinition.</p>
             </summary>
            
             <p>
             Version 1.2: Move part of parameter verification to property setter.
             </p>
            
             <param name="appDomain">The application domain (can be null or empty).</param>
             <param name="assembly">The assembly name (can be null if appDomain is null or empty).</param>
             <param name="typeName">The type name (cannot be null).</param>
             <param name="ignoreCase">
             False for case sensitive lookup, true for case insensitive lookup of the static method name.
             </param>
             <param name="paramTypes">
             The types of the parameters (can be null or empty).
             </param>
             <param name="paramValues">
             The values of the parameters (can be null or empty).
             </param>
             <param name="methodCalls">
             The method calls definitions to be made on the object after it is create (can be null).
             </param>
             <param name="instantiationLifetime">
             InstantiationLifetime value stating the length of the lifetime of this instance.
             </param>
             <param name="methodName">The name of the static method to use to create the object.</param>
            
             <exception cref="T:System.ArgumentNullException">
             If typeName or methodName is null or an array element (besides an element in paramValues
             corresponding to a paramType of "null") is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             If the paramTypes and paramValues arrays don't have the same size and aren't both null or
             if paramTypes has invalid values (see ParamTypes), or assembly is the empty string
             or instantiationLifetime is invalid or methodName is empty.
             </exception>
             <since>1.1</since>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.AddMethodCallDefinition(TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition)">
             <summary>
             Adds a MethodCallDefinition instance to method calls list.
             </summary>
             <returns>The position into which the new MethodCallDefinition instance was inserted.</returns>
            
             <param name="methodCallDefinition">The MethodCallDefinition instance to add</param>
             <exception cref="T:System.ArgumentNullException">If the MethodCallDefinition instance to add is null</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.RemoveMethodCallDefinition(TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition)">
            <summary>
            Removes a MethodCallDefinition instance from the method calls list.
            </summary>
            <param name="methodCallDefinition">The MethodCallDefinition instance to remove</param>
            <exception cref="T:System.ArgumentNullException">If the MethodCallDefinition instance to remove is null</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.InsertMethodCallDefinition(System.Int32,TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.MethodCallDefinition)">
            <summary>
            Inserts a MethodCallDefinition instance into the method calls list at specified index.
            </summary>
            <param name="index">The zero-based index at which MethodCallDefinition instance should be inserted.</param>
            <param name="methodCallDefinition">The MethodCallDefinition instance to insert</param>
            <exception cref="T:System.ArgumentNullException">If the MethodCallDefinition instance to insert is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or index is greater than Count
            of method calls list</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.RemoveAtMethodCallDefinition(System.Int32)">
            <summary>
            Removes a MethodCallDefinition instance from the method calls list at specified index.
            </summary>
            <param name="index">The zero-based index at which MethodCallDefinition instance should be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or index is greater than or
            equal to Count of method calls list</exception>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.AppDomain">
             <summary>
             <p>Property for the application domain name. Can be null (means the current application domain is used).</p>
             </summary>
            
             <p>
             Version 1.2: The setter for the property is added.
             </p>
            
             <value>The application domain name. Can be null  (means the current application domain is used).</value>
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.Assembly">
             <summary>
             <p>Property for the assembly name. Can be null if appDomain is null or empty(means no assembly
             will be loaded).
             </p>
             </summary>
            
             <p>
             Version 1.2: The setter for the property is added.
             </p>
            
             <value>The assembly name. Can be null if appDomain is null or empty(means no assembly will be loaded).
             </value>
             <exception cref="T:System.ArgumentNullException">If we set it to null when appDomain is not null or empty string
             </exception>
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.TypeName">
             <summary>
             <p>Property for the type name.</p>
             </summary>
            
             <p>
             Version 1.2: The setter for the property is added.
             </p>
            
             <value>The type name.</value>
             <exception cref="T:System.ArgumentNullException">
             If we set it to null
             </exception>
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.IsStatic">
             <summary>
             <p>Property for isStatic field.</p>
             </summary>
            
             <remarks>
             <p>If isStatic is set to false, the <code>MethodName</code> property will be set to null.</p>
            
             </remarks>
             <p>
             Version 1.2: The setter for the property is added.
             </p>
            
             <value>A flag indicates whether creation is done through a static factory method.</value>
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.MethodCalls">
             <summary>
             <p>Property for the method calls that should be invoked on the created object.</p>
             </summary>
            
             <p>
             Version 1.2: The method to construct MethodCallDefinition array changed.
             </p>
            
             <remarks>
             <p>No item in the array can be null. The field itself can be null (considered the same
             as a 0-length array, i.e. no methods should be invoked).</p>
            
             </remarks>
             <value>The method calls that should be invoked on the created object.</value>
             <exception cref="T:System.ArgumentException">Method calls array contains null element</exception>
             <since>1.1</since>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ELS.EmbededObjectFactory.ObjectDefinition.InstantiationLifetime">
             <summary>
             <p>Property for instantiationLifetime field.</p>
             </summary>
            
             <p>
             Version 1.2: The setter for the property is added.
             </p>
            
             <value>The instantiation lifetime of the object, which can alter the object creation graph.</value>
             <exception cref="T:System.ArgumentException">
             If instantiationLifetime is invalid.
             </exception>
             <since>1.1</since>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.ILoggingService">
             <summary>
             <para>
             This interface defines the contract to log the message.
             </para>
             <para>
             The defined log methods contain the originator indicating the originator of the log event,
             the context indicating the additional information that may be displayed as a part of the log
             entry, the logging level (the given one or as indicated by method name), the message and
             the message parameters. This WCF interface will work in singleton pattern.
             </para>
             </summary>
            
             <remarks>
             <strong>Thread Safety:</strong>
             <para>
             Implementation should be thread-safe.
             </para>
             </remarks>
            
             <author>Standlove</author>
             <author>TCSDEVELOPER</author>
             <version>1.0</version>
             <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingService.Log(System.String,System.String[],TopCoder.LoggingWrapper.Level,System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, logging level, and message parameters.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="level">
             The logging level.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingService.LogDebug(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.DEBUG</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingService.LogInfo(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.INFO</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingService.LogWarning(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.WARN</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingService.LogError(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.ERROR</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingService.LogFatal(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.FATAL</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="T:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger">
            <summary>
            <para>
            The EnterpriseLibraryLogger is a TopCoder logger that allows using the Enterprise Library: Logging
            Application Block as the backend logging destination. This class performs the inverse function to
            LoggingWrapperTraceListener. All messages logged to this class are redirected to the Logging
            Application Block, using the specified category.
            </para>
            </summary>
            <threadsafety>
            <para>
            This class is immutable and uses only thread-safe methods in the logging application block. Hence
            this class is also thread-safe.
            </para>
            </threadsafety>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.CATEGORY">
            <summary>
            <para>
            Represents the "Category" property to load from IConfiguration.
            </para>
            <para>
            It is used by the constructor to get the value of category of log entry.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.DEFAULT_CATEGORY">
            <summary>
            <para>
            The default value to set for "Category" property in configuration.
            </para>
            <para>
            It is used in method InitializeZeroConfiguration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.category">
            <summary>
            <para>
            The category to use when logging the message to the Logging Application Block.
            </para>
            <para>
            This field is set in the constructor, is immutable, and can not be null or an empty string.
            It is used in the Log method.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.levelMapping">
            <summary>
            <para>
            Represents the mapping from the Level enumeration to that of TraceEventType.
            </para>
            <para>
            The key is the Level value, and the value is the corresponding level in TraceEventType. It is
            populated in static constructor.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Creates a new EnterpriseLibraryLogger with settings loaded from given configuration.
            </para>
            </summary>
            <param name="configuration">The configuration object to load settings from.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
             If any of the configuration settings are missing or are invalid values.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.Dispose">
            <summary>
            <para>
            Disposes the resources held by the logger.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Returns true if the level is supported by the logger. All levels except OFF are supported.
            </para>
            </summary>
            <param name="level">The logging level to check.</param>
            <returns>true if the level is supported by the logger, false otherwise.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message with the created inner EventLog variable. If the level is OFF, the message will
            not be logged.
            </para>
            <para>
            If the level is not supported by this class, or the level is off, the message will not be logged.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log.</param>
            <param name="param">The params to use to format the message.</param>
            <exception cref="T:System.ArgumentNullException">If message or param is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.InitializeZeroConfiguration(TopCoder.LoggingWrapper.ZeroConfigurationOption,TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Initializes the application logging block backend for the zero configuration logging option.
            </para>
            <para>
            The Application Logging Block uses app.config for configuration of its internal workings, and
            app.config is only read once at startup. Hence, any changes we make to app.config will not be
            visible to the Application Logging Block until the application is restarted. Additionally,
            since app.config contains all sorts of configuration, we would have to properly merge any
            configuration settings for the logging block into the existing file. Because of these
            difficulties, the current version of this component will not attempt to configure the
            underlying Logging Application Block when using zero-configuration mode. This may be a future
            enhancement.
            </para>
            <para>
            The one action we do take is if the "Category" property is not in the configuration, we put the
            value "TopCoder Logger" as the value of this property into the configuration.
            </para>
            </summary>
            <param name="option">The option about which zero-configuration setup should be configured in
            the backend.</param>
            <param name="configuration">The configuration object to which needed configuration settings are
            added.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If any error occurs when accessing the configuration.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.#cctor">
            <summary>
            <para>
            This static constructor initializes the level mapping from Level to TraceEventType..
            </para>
            </summary>
        </member>
        <member name="P:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLogger.Category">
            <summary>
            <para>
            Represents the property to get the category to use when logging the message to the Logging
            Application Block.
            </para>
            </summary>
            <value>The category to use when logging the message to the Logging Application Block.</value>
        </member>
        <member name="T:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener">
            <summary>
            <para>
            The LoggingWrapperTraceListener class is an extension of the CustomTraceListener class that is
            designed to be plugged into the Enterprise Library Logging Application Block. All messages logged
            through the Logging Application Block will be directed to this trace listener, which will then
            relay them to a Logger from this component, which will then relay them to a backend logging
            solution.
            </para>
            <para>
            Unfortunately, a TraceListener does not receive much information about the logging events. All the
            level (called priority in the Logging Application Block) and parameter information has already
            been dealt with by the time the trace listener is notified, and is not available. All that is
            available is the message to be logged. We just send this message on to the TopCoder LoggingWrapper
            logger, to be logged at the default level.
            </para>
            <para>
            Note that if the instance is created using default constructor, the logger will be lazily
            initialized on the first call to Write or WriteLine method using the namespace stored in Attributes
            dictionary with key "loggerNamespace". The namespace is set via the Attributes property
            instead of constructor.
            </para>
            </summary>
            <threadsafety>
            <para>
            This class is supposed to be used inside the Enterprise Library - Logging Application Block which
            guarantee the thread-safety and the LoggingWrapper logger is also thread safe. Hence this class is
            thread-safe.
            </para>
            </threadsafety>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.LINE_BREAK">
            <summary>
            <para>
            Represents the line terminator.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.LOGGER_NAMESPACE">
            <summary>
            <para>
            Represents the key of logger namespace in Attributes.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.logger">
            <summary>
            <para>
            The Logging Wrapper logger to which log messages are forwarded. When calls to the Write or
            WriteLine methods are made by the Logging Application Block code, they are translated into
            calls to the Log method of this logger.
            </para>
            <para>
            This field can be set in the constructor or the first time Write or WriteLine method is called.
            Must be non-null.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.#ctor(TopCoder.LoggingWrapper.Logger)">
            <summary>
            <para>
            Creates a new LoggingWrapperTraceListener with given logger as backend logging solution.
            </para>
            </summary>
            <param name="logger">The Logging Wrapper Logger to redirect writes to.</param>
            <exception cref="T:System.ArgumentNullException">If logger is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.#ctor">
            <summary>
            <para>
            Default constructor. Does nothing.
            </para>
            <para>
            Note that the logger will be lazily initialized on the first call to a Write method using the
            namespace stored in Attributes dictionary with key "logNamespace".
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.Close">
            <summary>
            <para>
            Closes the trace listener.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.Write(System.Object)">
            <summary>
            <para>
            Writes a message to the trace listener.
            </para>
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.Write(System.String)">
            <summary>
            <para>
            Writes a message to the trace listener.
            </para>
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.Write(System.Object,System.String)">
            <summary>
            <para>
            Writes a message to the trace listener with given category.
            </para>
            </summary>
            <param name="message">The message to log.</param>
            <param name="category">The category of the message.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.Write(System.String,System.String)">
            <summary>
            <para>
            Writes a message to the trace listener with given category.
            </para>
            </summary>
            <param name="message">The message to log.</param>
            <param name="category">The category of the message.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.WriteLine(System.Object)">
            <summary>
            <para>
            Writes a message to the trace listener, followed by a line terminator.
            </para>
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.WriteLine(System.String)">
            <summary>
            <para>
            Writes a message to the trace listener, followed by a line terminator.
            </para>
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.WriteLine(System.Object,System.String)">
            <summary>
            <para>
            Writes a message to the trace listener with given category, followed by a line terminator.
            </para>
            </summary>
            <param name="message">The message to log.</param>
            <param name="category">The category of the message.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.WriteLine(System.String,System.String)">
            <summary>
            <para>
            Writes a message to the trace listener with given category, followed by a line terminator.
            </para>
            </summary>
            <param name="message">The message to log.</param>
            <param name="category">The category of the message.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.GetSupportedAttributes">
            <summary>
            Gets the custom attributes supported by the trace listener. Only "loggerNamespace" is supported.
            </summary>
            <returns>the custom attributes supported by the trace listener.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListener.CreateLogger">
            <summary>
            <para>
            Creates the logger via LogManager using the namespace in Attributes dictionary. The logger
            will be initialized if it is not set in constructor.
            </para>
            <para>
            bugr-fix 427
            </para>
            </summary>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If any error occurs when creating logger.</exception>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ExceptionSafeLogger">
             <summary>
             <para>
             The ExceptionSafeLogger wraps another Logger to guarantee that none of the Log methods (and the
             IsLevelEnabled method) throw any exception. Each method of this class forwards to the corresponding
             method of underlyingLogger. If an exception results, it tries to log the resulting exception to
             exceptionLogger. If this attempt to log the exception throws any exception, this second exception
             is caught and ignored. This class is used by LogManager. This class is not designed to be created
             dynamically, so it does not have the IConfiguration constructor or the InitializeZeroConfiguration
             method.
             </para>
             <para>
             The class is a bit unwieldy, because it doesn't use most of the functionality of
             the Logger class. However, we need this class to be a Logger instance, and because the earlier
             versions of this component (short-sightedly) decided to make Logger an abstract class instead of an
             interface, we are forced with inheriting all of the Logger apparatus. It is not practical to change
             Logger to an interface at this point, as it would require recompiling all components that make use
             of Logging Wrapper.
             </para>
             </summary>
             <threadsafety>
             <para>
             This class is immutable and it is assumed that the underlying logger is also thread-safe (as all
             loggers are required to be, per the Logger documentation). Hence this class is also thread-safe.
             </para>
             </threadsafety>
            
             <author>aubergineanode, TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLogger.underlyingLogger">
            <summary>
            <para>
            The logger to which all logging requests are to be forwarded.
            </para>
            <para>
            This field is set in the constructor, is immutable, and can never be null. It is used in all
            the Log and LogNamedMessage methods. All methods of this class forward to the corresponding
            method of underlyingLogger.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLogger.exceptionLogger">
            <summary>
            <para>
            The logger to which any exceptions thrown by underlyingLogger are logged.
            </para>
            <para>
            This field is set in the constructor, is immutable, and can never be null. It is used in all
            the Log and LogNamedMessage methods.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.#ctor(TopCoder.LoggingWrapper.Logger,TopCoder.LoggingWrapper.Logger)">
            <summary>
            <para>
            Creates a new ExceptionSafeLogger that ensures all log calls do not throw any exception.
            </para>
            </summary>
            <param name="underlyingLogger">The logger to which all logging requests are to be forwarded.
            </param>
            <param name="exceptionLogger">The logger to log any exceptions thrown by underlyingLogger.
            </param>
            <exception cref="T:System.ArgumentNullException">If underlyingLogger or exceptionLogger is null.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.Dispose">
            <summary>
            <para>
            Disposes the resources held by the logger.
            </para>
            <para>
            This method guarantees that no exception will ever be thrown.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Determines whether the logger supports the given level.
            </para>
            <para>
            If any error occurs, false will be returned. This method guarantees that no exception will ever
            be thrown.
            </para>
            </summary>
            <param name="level">The logging level to check.</param>
            <returns>true if the level is supported by the logger, false if not.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message using the underlying implementation with the specified logging level.
            </para>
            <para>
            This method guarantees that no exception will ever be thrown.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.Log(System.String,System.Object[])">
            <summary>
            <para>
            Logs a message using the underlying implementation with the default logging level.
            </para>
            <para>
            This method guarantees that no exception will ever be thrown.
            </para>
            </summary>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.LogNamedMessage(System.String,System.Object[])">
            <summary>
            <para>
            Logs a named message using the underlying implementation with the default logging level.
            </para>
            <para>
            This method guarantees that no exception will ever be thrown.
            </para>
            </summary>
            <param name="messageIdentifier">The string identifying which named message to log.</param>
            <param name="param">The parameters to use to format the message.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.LogNamedMessage(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a named message using the underlying implementation with the specified logging level.
            </para>
            <para>
            This method guarantees that no exception will ever be thrown.
            </para>
            </summary>
            <param name="level">The logging level at which to log the message.</param>
            <param name="messageIdentifier">The string identifying which named message to log.</param>
            <param name="param">The parameters to use to format the message.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.LogNamedMessage(TopCoder.LoggingWrapper.Level,TopCoder.LoggingWrapper.NamedMessage,System.Object[])">
            <summary>
            <para>
            Logs the named message to the underlying implementation with the specified logging level.
            </para>
            <para>
            This method guarantees that no exception will ever be thrown.
            </para>
            </summary>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The named message to log.</param>
            <param name="param">The parameters to use in formatting the message.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLogger.LogException(System.Exception)">
            <summary>
            <para>
            Attempts to log the exception. If any error occurs, it will be ignored.
            </para>
            </summary>
            <param name="e">The exception to log.</param>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ExceptionSafeLogger.NamedMessages">
            <summary>
            <para>
            Represents the property to get a copy of the set of named messages that can be used with this
            logger.
            </para>
            </summary>
            <value>The set of named messages that can be used with this logger.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ExceptionSafeLogger.DefaultLevel">
            <summary>
            <para>
            Represents the property to get the default logging level.
            </para>
            </summary>
            <value>The default logging level.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.ExceptionSafeLogger.Logname">
            <summary>
            <para>
            Represents the property to get the log name of the logger.
            </para>
            </summary>
            <value>The log name of the logger.</value>
        </member>
        <member name="T:TopCoder.LoggingWrapper.Helper">
             <summary>
             <para>
             Defines helper methods used in this component.
             </para>
             </summary>
             <threadsafety>
             <para>
             All static methods are thread safe.
             </para>
             </threadsafety>
            
             <author>aubergineanode, TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Helper.ValidateNotNull(System.Object,System.String)">
            <summary>
            <para>
            Validates an object <paramref name="value"/> for null.
            If it is, then <see cref="T:System.ArgumentNullException"/> is thrown.
            </para>
            </summary>
            <param name="value">The object reference to check.</param>
            <param name="paramName">The name of parameter.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Helper.ValidateNotEmptyString(System.String,System.String)">
            <summary>
            <para>
            Validates a string for empty value.
            If it is, then <see cref="T:System.ArgumentException"/> is thrown.
            If <paramref name="value"/> is null, verification is not performed and exception is not thrown.
            </para>
            </summary>
            <param name="value">The string to check.</param>
            <param name="paramName">The name of parameter.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Helper.ValidateNotNullNotEmptyString(System.String,System.String)">
            <summary>
            <para>
            Validates a string for null and empty values.
            If it is null, then <see cref="T:System.ArgumentNullException"/> is thrown.
            If it is empty string, then <see cref="T:System.ArgumentException"/> is thrown.
            </para>
            </summary>
            <param name="value">The string to check.</param>
            <param name="paramName">The name of parameter.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Helper.GetStringAttribute(TopCoder.Configuration.IConfiguration,System.String,System.Boolean)">
            <summary>
            <para>
            Returns a string value of the attribute from <paramref name="config"/>.
            The value should not be null if <paramref name="isRequired"/> is true.
            The value should not be empty string.
            If some errors occurred, ConfigException is thrown.
            </para>
            </summary>
            <param name="config">The configuration object to use.</param>
            <param name="name">The name of the attribute.</param>
            <param name="isRequired">The flag to indicate whether attribute is required or not.</param>
            <returns>the string value of the <paramref name="name"/>.</returns>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If configuration fail, or it doesn't contain required attribute, or attribute is empty string
            or some type casting errors are occurred.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Helper.GetBooleanAttribute(TopCoder.Configuration.IConfiguration,System.String,System.Boolean)">
            <summary>
            <para>
            Returns a boolean value of the attribute from <paramref name="config"/>.
            If value is null - method returns <paramref name="defaultValue"/>.
            If some errors occurred - ConfigException is thrown.
            </para>
            </summary>
            <param name="config">The configuration object to use.</param>
            <param name="paramName">The name of the attribute.</param>
            <param name="defaultValue">The default value returned when attribute is not found.</param>
            <returns>the boolean value of the <paramref name="paramName"/>, or given default value if the
            attribute is not found.</returns>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If configuration fail or some type casting errors are occurred.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Helper.GetLevelAttribute(TopCoder.Configuration.IConfiguration,System.String,TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Returns a Enum value of the attribute from <paramref name="config"/>.
            If value is null, method returns <paramref name="defaultValue"/>.
            If some errors occurred, ConfigException is thrown.
            </para>
            </summary>
            <param name="config">The configuration object to use.</param>
            <param name="name">The name of the attribute.</param>
            <param name="defaultValue">The default value returned when attribute is not found.</param>
            <returns>the Enum value of the <paramref name="name"/>, or given default value if the
            attribute is not found.</returns>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If configuration fail or some type casting errors are occurred.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Helper.GetStringListAttribute(TopCoder.Configuration.IConfiguration,System.String,System.Boolean)">
            <summary>
            <para>
            Returns a list of string values of the attribute from <paramref name="config"/>.
            The list should not be null if <paramref name="isRequired"/> is true.
            The list should not contains empty strings.
            If some errors occurred, ConfigException is thrown.
            </para>
            </summary>
            <param name="config">The configuration object to use.</param>
            <param name="name">The name of the attribute.</param>
            <param name="isRequired">The flag to indicate whether attribute is required or not.</param>
            <returns>the list of string values of the <paramref name="name"/>.</returns>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If configuration fail, or it doesn't contain required attribute, or attribute contains empty
            strings or some type casting errors are occurred.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Helper.ValidateLoggerNotNull(TopCoder.LoggingWrapper.Logger,System.String)">
            <summary>
            <para>
            Validates the given logger is not null and returns the logger. This method is used to perform
            non-null checking before passing parameters to constructor of super class.
            </para>
            </summary>
            <param name="logger">The logger to check.</param>
            <param name="name">The name of parameter.</param>
            <returns>the given logger.</returns>
            <exception cref="T:System.ArgumentNullException">If logger is null.</exception>
        </member>
        <member name="T:TopCoder.LoggingWrapper.InvalidPluginException">
            <summary>
            <para>
            Exception thrown when a pluggable logging implementation is invalid.  Generally this means that the logging
            implementation was missing an implementation of the Logger class, or does not have the correct public
            constructor.
            </para>
            This class is now obsolete.
            </summary>
            <author>TCSDEVELOPER, Mikhail_T</author>
            <version>2.0</version>
        </member>
        <member name="M:TopCoder.LoggingWrapper.InvalidPluginException.#ctor(System.String)">
            <summary>
            Creates a new instance of InvalidPluginException with the reason for the exception.
            </summary>
            <param name="message">The reason the exception happened</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.Level">
            <summary>
            This enum represents the logging level of a message that will be logged through a Logger interface.
            </summary>
            <remarks>
            <para>
            Enum is thread safe.
            </para>
            </remarks>
            <author>TCSDEVELOPER, Mikhail_T</author>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <since>2.0</since>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Level.FATAL">
            <summary>
            Logging level FATAL designates very severe error events that will presumably lead the
            application to abort.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Level.ERROR">
            <summary>
            Logging level ERROR designates error events that might still allow the application to continue
            running.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Level.FAILUREAUDIT">
            <summary>
            Logging level FAILUREAUDIT indicates a security event that occurs when an audited access
            attempt fails; for example, a failed attempt to open a file.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Level.SUCCESSAUDIT">
            <summary>
            Logging level SUCCESSAUDIT indicates a significant, successful operation.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Level.WARN">
            <summary>
            Logging level WARN designates potentially harmful situations.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Level.INFO">
            <summary>
            Logging level INFO  designates informational messages that highlight the progress of the
            application at coarse-grained level.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Level.DEBUG">
            <summary>
            Logging level DEBUG designates fine-grained informational events that are most useful to debug
            an application.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Level.OFF">
            <summary>
            Logging level OFF designates a lower level priority than all the rest.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LevelFilteredLogger">
             <summary>
             <para>
             The LevelFilteredLogger wraps another Logger to filter out and calls to the Log methods that are
             logged at any of the filtered levels. Each method of this class forwards to the corresponding
             method of underlyingLogger if the level is not filtered. This class is used by LogManager when
             creating a logger if the filtered_levels property is present in the configuration. This class is
             not designed to be created dynamically, so it does not have the IConfiguration constructor or the
             InitializeZeroConfiguration method.
             </para>
             <para>
             The class is a bit unwieldy, because this class bypasses most of the
             functionality of the Logger class. However, we need this class to be a Logger instance, and because
             the earlier versions of this component (short-sightedly) decided to make Logger an abstract class
             instead of an interface, we are forced with inheriting all of the Logger apparatus. It is not
             practical to change Logger to an interface at this point, as it would require recompiling all
             components that make use of Logging Wrapper.
             </para>
             </summary>
             <threadsafety>
             <para>
             This class is immutable and it is assumed that the underlying logger is also thread-safe (as all
             loggers are required to be, per the Logger documentation). Hence this class is also thread-safe.
             </para>
             </threadsafety>
            
             <author>aubergineanode, TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLogger.filteredLevels">
            <summary>
            <para>
            The list of levels that are filtered out by this logger.
            </para>
            <para>
            This field is set in the constructor, is immutable, and can never be null. It may be empty, but
            items are never added/removed from it. Messages logged at any of the levels in this list will
            be ignored and not passed to the underlying logger.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLogger.underlyingLogger">
            <summary>
            <para>
            The logger to which all logging requests are to be forwarded.
            </para>
            <para>
            This field is set in the constructor, is immutable, and can never be null. It is used in all
            the Log and LogNamedMessage methods. All methods of this class forward to the corresponding
            method of underlyingLogger, unless the message is being logged at a level which is filtered
            out, in which case nothing is done.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLogger.#ctor(TopCoder.LoggingWrapper.Logger,System.Collections.Generic.IList{TopCoder.LoggingWrapper.Level})">
            <summary>
            <para>
            Creates a new LevelFilteredLogger that filter out messages of given levels.
            </para>
            </summary>
            <param name="underlyingLogger">The logger to which log messages will be forwarded.</param>
            <param name="filteredLevels">The levels that will be filtered out and for which log messages
            will not be forwarded.</param>
            <exception cref="T:System.ArgumentNullException">If underlyingLogger or filteredLevels is null.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLogger.Dispose">
            <summary>
            <para>
            Disposes the resources held by the logger.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLogger.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Determines whether the logger supports the given level.
            </para>
            <para>
            Note that this method indicates whether the level is supported by the logger, not whether the
            logging is currently turned on for that level.
            </para>
            </summary>
            <param name="level">The logging level to check.</param>
            <returns>true if the level is supported by the logger, false if not.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLogger.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message using the underlying implementation with the specified logging level.
            </para>
            <para>
            The message will not be logged if the given level is in the list of levels to be filtered.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
            <exception cref="T:System.ArgumentNullException">If message or params is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLogger.LogNamedMessage(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a named message using the underlying implementation with the specified logging level.
            </para>
            <para>
            This method guarantees that no exception will ever be thrown.
            </para>
            </summary>
            <param name="level">The logging level at which to log the message.</param>
            <param name="messageIdentifier">The string identifying which named message to log.</param>
            <param name="param">The parameters to use to format the message.</param>
            <exception cref="T:System.ArgumentNullException">If messageIdentifier or param is null.</exception>
            <exception cref="T:System.ArgumentException">If messageIdentifier is the empty string, or
            messageIdentifier is not in the keys of the namedMessages dictionary.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message from
            the params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If there is a failure in the backend logging system.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLogger.LogNamedMessage(TopCoder.LoggingWrapper.Level,TopCoder.LoggingWrapper.NamedMessage,System.Object[])">
            <summary>
            <para>
            Logs the named message to the underlying implementation with the specified logging level.
            </para>
            <para>
            The message will not be logged if the given level is in the list of levels to be filtered.
            </para>
            </summary>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The named message to log.</param>
            <param name="param">The parameters to use in formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If message or params is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="P:TopCoder.LoggingWrapper.LevelFilteredLogger.NamedMessages">
            <summary>
            <para>
            Represents the property to get a copy of the set of named messages that can be used with this
            logger.
            </para>
            </summary>
            <value>The set of named messages that can be used with this logger.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.LevelFilteredLogger.DefaultLevel">
            <summary>
            <para>
            Represents the property to get the default logging level.
            </para>
            </summary>
            <value>The default logging level.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.LevelFilteredLogger.Logname">
            <summary>
            <para>
            Represents the property to get the log name of the logger.
            </para>
            </summary>
            <value>The log name of the logger.</value>
        </member>
        <member name="T:TopCoder.LoggingWrapper.Log4NETImpl">
            <summary>
            <para>
            Log4NETImpl extends from the Logger abstract class to log messages using the logger from the
            log4net 3rd party component.
            </para>
            <para>
            Changes in 3.0: A new constructor is added while the old constructor is made obsolete; The
            InitializeZeroConfiguration method is added; Named message support is added; Immutable fields are
            marked readonly. Exceptions are now allowed and documented.
            </para>
            <para>
            Creating this Logger implementation is done by code like this:
            </para>
            <code>
            Logger logger = LogManager.CreateLogger("TopCoder.LoggingWrapper.Log4NETImpl");
            </code>
            <para>
            Once created, you may log messages at any of the levels defined in Level. For example, to log a
            message at the level of INFO, you would use the logger as follows:
            </para>
            <code>
            logger.Log(Level.INFO, "Hello world!");
            </code>
            <para>
            You can also log a named message that has been defined in configuration. The actual message
            will be generated according the the mapped NamedMessage object with given name:
            </para>
            <code>
            logger.LogNamedMessage(Level.DEBUG, "Name of Message", "param1", "param2");
            </code>
            </summary>
            <threadsafety>
            <para>
            Since the log4net is thread safe, and this class is immutable itself. So it is thread safe
            inherently.
            </para>
            </threadsafety>
            <author>TCSDEVELOPER, Mikhail_T</author>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <since>2.0</since>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.CONFIG_FILE">
            <summary>
            <para>
            Represents the "config_file" property key in the configuration. It is used by constructor to
            get the value to configure log4net.
            </para>
            <para>
            Changes in 3.0: This is the key used to load the value from IConfiguration instead of
            ConfigManager.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.DEFAULT_CONFIG_FILE">
            <summary>
            <para>
            The default value to set for "config_file" property in configuration. It is used in method
            InitializeZeroConfiguration.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.LOG4NET_ELEMENT">
            <summary>
            <para>
            Represents the name of log4net element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_ELEMENT">
            <summary>
            <para>
            Represents the name of appender element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_NAME_ATTRIBUTE">
            <summary>
            <para>
            Represents the name of name attribute of log4net element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_NAME">
            <summary>
            <para>
            Represents the value of name attribute of log4net element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.ROOT_ELEMENT">
            <summary>
            <para>
            Represents the name of root element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_REF_ELEMENT">
            <summary>
            <para>
            Represents the name of appender-ref element of root element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_REF_ATTRIBUTE">
            <summary>
            <para>
            Represents the name of ref attribute of appender-ref element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.LEVEL_ELEMENT">
            <summary>
            <para>
            Represents the name of level element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_TYPE_ATTRIBUTE">
            <summary>
            <para>
            Represents the name of type attribute of appender element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_FILE_ELEMENT">
            <summary>
            <para>
            Represents the name of file element of appender element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_DATAPATTERN_ELEMENT">
            <summary>
            <para>
            Represents the name of dataPattern element of appender element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_STATICLOGFILENAME_ELEMENT">
            <summary>
            <para>
            Represents the name of staticLogFileName element of appender element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_ROLLINGSTYLE_ELEMENT">
            <summary>
            <para>
            Represents the name of rollingStyle element of appender element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.APPENDER_MAXSIZEROLLBACKUPS_ELEMENT">
            <summary>
            <para>
            Represents the name of maxSizeRollBackups element of appender element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.LAYOUT_ELEMENT">
            <summary>
            <para>
            Represents the name of layout element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.LAYOUT_TYPE_ATTRIBUTE">
            <summary>
            <para>
            Represents the name of type attribute of layout element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.LAYOUT_CONVERSIONPATTERN_ELEMENT">
            <summary>
            <para>
            Represents the name of conversionPattern element of layout element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.VALUE_ELEMENT">
            <summary>
            <para>
            Represents the name of value element in xml configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.levelMapping">
            <summary>
            <para>
            Represents the level mapping from the Level enumeration to that of Log4NETLevel.
            </para>
            <para>
            The key is the Level value, and the value is the corresponding level in Log4NETLevel. It is
            populated in static constructor.
            </para>
            <para>
            Changes in 3.0: generic collection is used. And it is readonly now.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.log">
            <summary>
            <para>
            Represents ILog instance retrieved from the log4net.LogManager to log the message.
            </para>
            <para>
            It is initialized in the constructor, can not be null, and is immutable.
            </para>
            <para>
            Changes in 3.0: It is readonly now.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.#ctor(System.Collections.IDictionary)">
            <summary>
            <para>
            Create a new instance of Log4NETImpl from the configuration values defined in the given
            properties dictionary.
            </para>
            <para>
            Changes in 3.0: It is made obsolete, replaced by constructor with IConfiguration as parameter.
            </para>
            </summary>
            <param name="properties">The configuration dictionary.</param>
            <exception cref="T:System.ArgumentNullException">If properties is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If any failure creating the log4net instance is encountered.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.#ctor">
            <summary>
            <para>
            Create a new instance of Log4NETImpl with default logger name.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Create a new instance of Log4NETImpl with setting loaded from the given configuration.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="configuration">The configuration object to load settings from.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
             If any of the configuration settings are missing or are invalid values.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.Dispose">
            <summary>
            <para>
            Disposes the resources held by the Log4NETImpl instance.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Returns true if the level is supported by the Log4NETImpl instance. All levels in Level are
            supported by the current implementation.
            </para>
            </summary>
            <param name="level">The Level to check.</param>
            <returns>true for all levels in Level.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message to the ILog instance used by this class.
            </para>
            <para>
            If the level is not supported by this class, or the level is off, the message will not be logged.
            </para>
            <para>
            Changes in 3.0: Exceptions are now allowed and documented. Exceptions can be suppressed by
            wrapping the logger in an ExceptionSafeLogger.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
            <exception cref="T:System.ArgumentNullException">If message or params is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.LogNamedMessage(TopCoder.LoggingWrapper.Level,TopCoder.LoggingWrapper.NamedMessage,System.Object[])">
            <summary>
            <para>
            Logs the named message to the ILog instance used by this class with the specified logging level.
            </para>
            <para>
            The params array will be used for both pattern like {0}, {1}, etc. in the text of named message,
            and the custom pattern like %property{name} in conversion pattern in log4net.
            </para>
            <para>
            If the level is not supported by this class, or the level is off, the message will not be logged.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The named message to log.</param>
            <param name="param">The parameters to use in formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If message or params is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If the number of parameters in the params array
            does not match the number of parameters for the NamedMessage.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If there is a failure in the log4net call.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.LogMessage(TopCoder.LoggingWrapper.Level,System.String)">
            <summary>
            <para>
            Logs the named message to the ILog instance used by this class with the specified logging level.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The named message to log.</param>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.InitializeZeroConfiguration(TopCoder.LoggingWrapper.ZeroConfigurationOption,TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Initializes the log4Net backend for the zero configuration logging option.
            </para>
            <para>
            If the "config_file" property is not in the configuration, the value "log4net.config" will be
            put as the value of this property into the configuration.
            </para>
            <para>
            If the config file does not exist, an appropriate log4Net configuration file will be written
            out to this location according to the zero-configuration option:
            </para>
            <list type="bullet">
            <item>
            <term>Test</term>
            <description>The configuration uses a FileAppender that writes to the file
            ../../test_files/log.txt.</description>
            </item>
            <item>
            <term>Component</term>
            <description>The configuration uses a FileAppender that writes to the file ./log.txt.
            </description>
            </item>
            <item>
            <term>Certification</term>
            <description>The configuration uses a RollingFileAppender to write to the logs folder.
            Files will be rolled over daily, using a pattern of “yyyy-mm-dd" for the files. The
            configuration is set up so as never to delete old logs.
            </description>
            </item>
            <item>
            <term> Client Debug</term>
            <description>This is the same as certification, but configured to keep only the 30 most recent
            logs.</description>
            </item>
            <item>
            <term>Client Stress</term>
            <description>This is the same as client debug, but configured so that only messages at the
            Level.Error (this is the log4net level) or higher are recorded.</description>
            </item>
            <item>
            <term>Release</term>
            <description>This is the same as client debug, but configured so that only messages at the
            Level.Warn (this.is the log4net level) or higher are recorded.</description>
            </item>
            </list>
            <para>
            If the config file does exist, we assume it is from a previous run and do not alter it.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="option">The option about which zero-configuration setup should be configured in
            the backend.</param>
            <param name="configuration">The configuration object to which needed configuration settings are
            added.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If any error occurs when accessing the configuration or writing the configuration file.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.WriteConfigFile(System.Xml.XmlTextWriter,TopCoder.LoggingWrapper.ZeroConfigurationOption)">
            <summary>
            <para>
            Writes the configuration file using given writer according to the zero-configuration option.
            </para>
            </summary>
            <param name="writer">The writer to write.</param>
            <param name="option">The option about which zero-configuration setup should be configured in
            the backend.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.WriteFileAppenderConfig(System.Xml.XmlTextWriter,System.String)">
            <summary>
            <para>
            Writes the type attribute and children elements of FileAppender element.
            </para>
            </summary>
            <param name="writer">The writer to write.</param>
            <param name="file">The location of log file.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.WriteRollingFileAppenderConfig(System.Xml.XmlTextWriter,TopCoder.LoggingWrapper.ZeroConfigurationOption)">
            <summary>
            <para>
            Writes the type attribute and children elements of RollingFileAppender element.
            </para>
            </summary>
            <param name="writer">The writer to write.</param>
            <param name="option">The option about which zero-configuration setup should be configured in
            the backend.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.WriteLayoutConfig(System.Xml.XmlTextWriter)">
            <summary>
            <para>
            Writes a layout element for appender.
            </para>
            </summary>
            <param name="writer">The writer to write.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.WriteElement(System.Xml.XmlTextWriter,System.String,System.String)">
            <summary>
            <para>
            Writes an element with given name containing an attribute named "value" with given value.
            </para>
            </summary>
            <param name="writer">The writer to write.</param>
            <param name="name">The name of element.</param>
            <param name="value">The value of attribute named "value".</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImpl.#cctor">
            <summary>
            <para>
            This static constructor initializes the level mapping for all Log4NETImpl instances.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.Log4NETImpl.Log4NETLevel">
            <summary>
            <para>
            Logging level for the Log4NET component.
            </para>
            </summary>
            <remarks>
            <para>
            Enum is thread safe.
            </para>
            </remarks>
            <author>TCSDEVELOPER, Mikhail_T</author>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <since>2.0</since>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.Log4NETLevel.OFF">
            <summary>
            <para>
            Logging level OFF designates a lower level priority than all the rest.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.Log4NETLevel.DEBUG">
            <summary>
            <para>
            Logging level DEBUG designates fine-grained informational events that are most useful to
            debug an application.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.Log4NETLevel.INFO">
            <summary>
            <para>
            Logging level INFO  designates informational messages that highlight the progress of the
            application at coarse-grained level.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.Log4NETLevel.WARN">
            <summary>
            <para>
            Logging level WARN designates potentially harmful situations.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.Log4NETLevel.ERROR">
            <summary>
            <para>
            Logging level ERROR designates error events that might still allow the application to
            continue running.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImpl.Log4NETLevel.FATAL">
            <summary>
            <para>
            Logging level FATAL designates very severe error events that will presumably lead the
            application to abort.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LoggingException">
            <summary>
            The base class for all exceptions thrown from the Log and LogNamedMessage methods of the Logger
            class. Generally, a LoggingException indicates that the backend logging solution encountered an
            error. For the specific condition that message formatting failed, a MessageFormattingException is
            thrown instead. Future versions of the component may add more specific exceptions.
            </summary>
            <threadsafety>
            <para>
            This class is immutable thus thread safe.
            </para>
            </threadsafety>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingException.#ctor">
            <summary>
            Creates a new instance of LoggingException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingException.#ctor(System.String)">
            <summary>
            Creates a new instance of LoggingException with a descriptive message about why
            the exception was thrown.
            </summary>
            <param name="message">A descriptive message of why the exception was thrown.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of LoggingException with a descriptive message about why
            the exception was thrown, and a wrapped exception which was the actual cause.
            </summary>
            <param name="message">A descriptive message of why the exception was thrown.</param>
            <param name="cause">The wrapped exception which was the actual cause.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Creates a new instance of LoggingException from the serialization info and streaming context
             given.
             </summary>
            
             <param name="info">Serialization info for the exception.</param>
             <param name="context">Streaming context of the exception.</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LogManager">
             <summary>
             <para>
             LogManager contains methods Log and IsLevelEnabled to provide access to the pluggable logging
             solution and method GetLogger to retrieve the logging solution currently in use.
             </para>
             <para>
             Changes in 3.0: Refactored to use Configuration API and Filed Based Configuration instead of
             ConfigManager; Added support to use ExceptionSafeLogger and FilteredLevelLogger
             </para>
             </summary>
             <remarks>
             An example of creating a Logger with the following ConfigManager file:
             <pre>
             &lt;ConfigManager&gt;
            
               &lt;!-- Example default configuration  --&gt;
               &lt;namespace name="TopCoder.LoggingWrapper.LogManager"&gt;
            
                 &lt;!-- the full classname of the Logger subclass, required --&gt;
                 &lt;property name="logger_class"&gt;
                   &lt;value&gt;TopCoder.LoggingWrapper.SimpleLogger&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- name of assembly, optional --&gt;
                 &lt;property name="logger_assembly"&gt;
                   &lt;value&gt;TopCoder.LoggingWrapper.Test.dll&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- log name of Logger, required --&gt;
                 &lt;property name="logger_name"&gt;
                   &lt;value&gt;DefaultLogger&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- propagate exceptions, optional --&gt;
                 &lt;property name="propagate_exceptions"&gt;
                   &lt;value&gt;false&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- child namespace for exception logger, optional --&gt;
                 &lt;reference&gt;ExceptionLogger&lt;/reference&gt;
            
                 &lt;!-- child namespace for named messages, optional --&gt;
                 &lt;reference&gt;NamedMessages&lt;/reference&gt;
            
                 &lt;!-- default zero-configuration option, optional --&gt;
                 &lt;property name="default_config"&gt;
                   &lt;value&gt;Test&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- filtered levels, optional --&gt;
                 &lt;property name="filtered_levels"&gt;
                   &lt;value&gt;FATAL&lt;/value&gt;
                   &lt;value&gt;ERROR&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- default log level, optional --&gt;
                 &lt;property name="default_level"&gt;
                   &lt;value&gt;FATAL&lt;/value&gt;
                 &lt;/property&gt;
               &lt;/namespace&gt;
            
               &lt;!-- nested logger for logging exceptions --&gt;
               &lt;namespace name="ExceptionLogger"&gt;
                 &lt;!-- the full classname of the Logger subclass, required --&gt;
                 &lt;property name="logger_class"&gt;
                   &lt;value&gt;TopCoder.LoggingWrapper.DiagnosticImpl&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- log name of Logger, required --&gt;
                 &lt;property name="logger_name"&gt;
                   &lt;value&gt;ExceptionLogger&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- propagate exceptions, optional --&gt;
                 &lt;property name="propagate_exceptions"&gt;
                   &lt;value&gt;true&lt;/value&gt;
                 &lt;/property&gt;
            
                 &lt;!-- source for the EventLog, required --&gt;
                 &lt;property name="source"&gt;
                   &lt;value&gt;SourceForExceptionLogger&lt;/value&gt;
                 &lt;/property&gt;
               &lt;/namespace&gt;
            
               &lt;!-- Example configuration for named messages --&gt;
               &lt;namespace name="NamedMessages"&gt;
                 &lt;reference&gt;SimpleMessage&lt;/reference&gt;
                 &lt;reference&gt;Log4NetMessage&lt;/reference&gt;
               &lt;/namespace&gt;
            
               &lt;!-- Demonstrates a named message --&gt;
               &lt;namespace name="SimpleMessage"&gt;
                 &lt;property name="text"&gt;
                   &lt;value&gt;The parameters are {0} and {1}&lt;/value&gt;
                 &lt;/property&gt;
                 &lt;property name="default_level"&gt;
                   &lt;value&gt;INFO&lt;/value&gt;
                 &lt;/property&gt;
                 &lt;property name="parameters"&gt;
                   &lt;value&gt;myParam1&lt;/value&gt;
                   &lt;value&gt;myParam2&lt;/value&gt;
                 &lt;/property&gt;
               &lt;/namespace&gt;
            
               &lt;!-- Demonstrates a named message --&gt;
               &lt;namespace name="Log4NetMessage"&gt;
                 &lt;property name="text"&gt;
                   &lt;value&gt;The parameters is %property{myParam}&lt;/value&gt;
                 &lt;/property&gt;
                 &lt;property name="default_level"&gt;
                   &lt;value&gt;WARN&lt;/value&gt;
                 &lt;/property&gt;
                 &lt;property name="parameters"&gt;
                   &lt;value&gt;param&lt;/value&gt;
                 &lt;/property&gt;
               &lt;/namespace&gt;
            
             &lt;/ConfigManager&gt;
             </pre>
             Would be like this:
             <code>
             Logger logger = LogManager.CreateLogger();
             </code>
             If you wished to specify a custom namespace, then it would look like this:
             <code>
             Logger logger = LogManager.CreateLogger("TopCoder.LoggingWrapper.LogManager");
             </code>
             Or you can specify the configuration object directly. The configuration object can be loaded
             from file, created manually or in other ways:
             <code>
             IConfiguration config =
                 new ConfigurationManager().GetConfiguration("TopCoder.LoggingWrapper.LogManager");
             Logger logger = LogManager.CreateLogger(config);
             </code>
             Then you may use the logger implementation freely.
             </remarks>
             <threadsafety>
             <para>
             This class maintains no state, so it is thread-safe inherently.
             </para>
             </threadsafety>
             <author>TCSDEVELOPER, Mikhail_T</author>
             <author>aubergineanode, TCSDEVELOPER</author>
             <version>3.0</version>
             <since>2.0</since>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.DEFAULT_NAMESPACE">
            <summary>
            <para>
            Represents the default namespace to load the configuration values from configuration to create
            the Logger.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.LOGGER_CLASS">
            <summary>
            <para>
            Represents the key for class name of the Logger subclass in configuration.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.LOGGER_ASSEMBLY">
            <summary>
            <para>
            Represents the key for assembly name of the Logger subclass in configuration. This is an
            optional argument.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.DEFAULT_CONFIG">
            <summary>
            <para>
            Represents the key for "default_config" in configuration. This is an optional argument.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.FILTERED_LEVELS">
            <summary>
            <para>
            Represents the key for "filtered_levels" in configuration. This is an optional argument.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.PROPAGATE_EXCEPTIONS">
            <summary>
            <para>
            Represents the key for "propagate_exceptions" in configuration. This is an optional argument.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.EXCEPTION_LOGGER">
            <summary>
            <para>
            Represents the key for "ExceptionLogger" in configuration. This is an optional argument.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.DEFAULT_LOGGER_CLASS_APP_SETTING_NAME">
            <summary>
            <para>
            Represent the defalut logger class used to be created.
            </para>
            <para>
            Bugr-fix 427
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.CLASS_PARAMETER">
            <summary>
            Represents the classname property to load the from the configuration.
            It is now Obsolete.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.classname">
            <summary>
            Represents the classname of the Logger subclass to instantiate.
            It is now Obsolete.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.log">
            <summary>
            Represents the instance of Logger subclass to instantiate, it is used in the LogManager.Log
            methods, and created in the LoadConfiguration method, returned in the GetLogger methods.
            It is now Obsolete.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManager.configuration">
            <summary>
            Represents the configuration values to create the Logger instance to log the information.
            It is now Obsolete.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.#cctor">
            <summary>
            Static constructor for configuration loading before application starts.
            It is now Obsolete.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.LoadConfiguration">
            <summary>
            Loads/reloads configuration file and loads pluggable logging solution
            It is now Obsolete.
            </summary>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If there is an error loading the configuration file.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.LoadPlugin(System.String)">
            <summary>
            Loads pluggable logging solution with defined classname.
            It is now Obsolete.
            </summary>
            <param name="classname">The classname of the Logger subclass to load.</param>
            <exception cref="T:System.ArgumentNullException">If classname is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
            If the classname can not be found in the assembly, or a general error loading the plugin occurs.
            </exception>
            <exception cref="T:TopCoder.LoggingWrapper.InvalidPluginException">
            When the specified plugin's constructor can not be found.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.GetLogger">
            <summary>
            Retrieves the Logger instance that is currently in use.
            It is now obsolete.
            </summary>
            <returns>The Logger instance currently in use.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.GetLoggerClassName">
            <summary>
            Retrieves the full class name of logging solution currently in use.
            It is now obsolete.
            </summary>
            <returns>The full class name of logging solution currently in use.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.GetLogger(System.String)">
            <summary>
            Loads and retrieve the logging solution with class name <c>classname</c>
            It is now obsolete.
            </summary>
            <param name="classname">Full name of class of pluggable logging solution.</param>
            <returns>The created Logger instance from the classname.</returns>
            <exception cref="T:System.ArgumentNullException">If classname is null.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            Provides access to current pluggable logging solution
            It is now obsolete.
            </summary>
            <param name="level">logging level</param>
            <param name="message">logging message (can be contains {0},{1} for parameter inserting)</param>
            <param name="param">parameters for logging message (if needed)</param>
            <exception cref="T:System.ArgumentNullException">If message or param is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If no logger has been set up yet.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.PluginException">If an exception occurs while Logging.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.Log(System.String,System.Object[])">
            <summary>
            Provides access to current pluggable logging solution with its default logging level
            </summary>
            <param name="message">logging message (can be contains {0},{1} for parameter inserting)</param>
            <param name="param">parameters for logging message (if needed)</param>
            <exception cref="T:System.ArgumentNullException">If message or param is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If no logger has been set up yet.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.PluginException">If an exception occurs while Logging.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            Is used to determine if a specific logging level is enabled for current logging solution
            </summary>
            <param name="level">logging level</param>
            <returns>is enabled or not enabled</returns>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If no logger has been set up yet.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.PluginException">If an exception occurs when calling IsLevelEnabled.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.CreateLogger">
            <summary>
            <para>
             It will default to returning a new implementation of "DiagnosticImpl", but will also allow
             the user to override the implementing class simply by adding the fully qualified type name
             to the appSetting section of web.config or app.config
            </para>
            <para>
            bugr-fix 427
            </para>
            </summary>
            <returns>The created Logger instance.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.CreateLogger(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Creates a new Logger using the settings loaded from given configuration. Different
            implementations of the Logger abstract class may require different configuration values, each
            will load the implementation specific data from the properties.
            </para>
            <para>
            If the namespace is the default namespace for the component and the "default_config" property
            is provided in configuration, the zero-configuration setting will be used. Note that we only
            allow zero-configuration for the default namespace. Zero-configuration isn't allowed for
            multiple loggers because you're no longer in zero-configuration mode if you're using multiple
            loggers, and we don't want to risk two zero-configuration settings being contradictory.
            </para>
            <para>
            New in 3.0.
            </para>
            </summary>
            <param name="configuration">The configuration object to load settings from.</param>
            <returns>The created Logger instance.</returns>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If there is an error in instantiating the logger.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.GetClassType(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Returns the class type with given name. If assemblyName is not null, the assembly will be load
            for searching the type, otherwise the default assembly will be used.
            </para>
            </summary>
            <param name="config">The configuration object to load settings from.</param>
            <returns>the class type with given name.</returns>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If the class type can not be loaded.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.ApplyZeroConfiguration(TopCoder.Configuration.IConfiguration,System.Type)">
            <summary>
            <para>
            Applies the zero configuration by calling the static method InitializeZeroConfiguration of
            logger. The zero configuration will only be used if default namespace is used and property
            "default_config" is provided in configuration.
            </para>
            </summary>
            <param name="config">The configuration object to load settings from.</param>
            <param name="type">The class type of logger.</param>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If the value of propety is malformed, or any error occurs
            when loading the configuration or calling the static method.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.ApplyFilterLevelsPolicy(TopCoder.Configuration.IConfiguration,TopCoder.LoggingWrapper.Logger)">
            <summary>
            <para>
            Returns a LevelFilteredLogger wrapping the given logger with specified filtered levels loaded
            from configuration. If "filtered_levels" property is not provided in configuration, the given
            logger is returned directly.
            </para>
            </summary>
            <param name="config">The configuration object to load settings from.</param>
            <param name="logger">The logger to be wrapped.</param>
            <returns>a LevelFilteredLogger wrapping given logger with specified filtered levels loaded
            from configuration, or given logger if "filtered_levels" property is not provided.</returns>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If the value of property is malformed, or duplicate values
            are found in configuration, or any error occurs when loading the configuration.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManager.ApplyExceptionPolicy(TopCoder.Configuration.IConfiguration,TopCoder.LoggingWrapper.Logger)">
            <summary>
            <para>
            Returns an ExceptionSafeLogger wrapping the given logger as underlying logger if the value of
            "propagate_exceptions" property is false or the property doesn't exist. Otherwise, the given
            logger will be returned directly.
            </para>
            <para>
            If child configuration "ExceptionLogger" is provided, an logger will be created using the
            child configuration and used as exception logger in the ExceptionSafeLogger to be returned.
            Otherwise, the given logger will be used as exception logger instead.
            </para>
            </summary>
            <param name="config">The configuration object to load settings from.</param>
            <param name="logger">The logger to be wrapped.</param>
            <returns>an ExceptionSafeLogger wrapping the given logger as underlying logger, or given logger
            if the value of "propagate_exceptions" property is true.</returns>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">If the value of property is malformed, or any error occurs
            when loading the configuration or creating the exception logger.</exception>
        </member>
        <member name="P:TopCoder.LoggingWrapper.LogManager.Configuration">
            <summary>
            Represents the configuration values to create the Logger instance to log the information.
            It is now Obsolete.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.MessageFormattingException">
            <summary>
            The MessageFormattingException is thrown in from the Log and LogNamedMessage methods of the Logger
            class. It indicates that the parameters to these methods could not correctly be combined with the
            message string. Commonly, this will indicate a failure of a string.Format call. For some logging
            implementations, it may indicate a similar failure in the backend logging solution.
            </summary>
            <threadsafety>
            <para>
            This class is immutable thus thread safe.
            </para>
            </threadsafety>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.MessageFormattingException.#ctor">
            <summary>
            Creates a new instance of MessageFormattingException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.MessageFormattingException.#ctor(System.String)">
            <summary>
            Creates a new instance of MessageFormattingException with a descriptive message about why
            the exception was thrown.
            </summary>
            <param name="message">A descriptive message of why the exception was thrown.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.MessageFormattingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of MessageFormattingException with a descriptive message about why
            the exception was thrown, and a wrapped exception which was the actual cause.
            </summary>
            <param name="message">A descriptive message of why the exception was thrown.</param>
            <param name="cause">The wrapped exception which was the actual cause.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.MessageFormattingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Creates a new instance of MessageFormattingException from the serialization info and streaming
             context given.
             </summary>
            
             <param name="info">Serialization info for the exception.</param>
             <param name="context">Streaming context of the exception.</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.NamedMessage">
             <summary>
             <para>
             The NamedMessage class is a tiny data storage class that stores all the information for one named message. It
             does not have any behavior, only a few getters.  This class is used by the Logger class (and implementations)
             to translate between a message name and all the information that is needed to actually log a messaage.
             </para>
             </summary>
             <threadsafety>
             <para>
             This class is immutable and hence thread-safe.
             </para>
             </threadsafety>
            
             <author>aubergineanode, TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.NamedMessage.name">
            <summary>
            <para>
            Represents the name of the named message. This field is set in the constructor, is immutable, and can not
            be null or an empty string.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.NamedMessage.text">
            <summary>
            <para>
            Represents the actual text that will be logged for this named message. The text should include any
            backend specific way of referencing parameters. This field is set in the constructor, is immutable, and
            can not be null or an empty string.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.NamedMessage.parameterNames">
            <summary>
            <para>
            Represents the names of the parameters to be used when logging the message. Logging implementations
            associate the parameters passed to LogNamedMessage by these values by matching index. This field is set
            in the constructor, is immutable, and can be empty. Can not be null and can not contain null or empty
            items.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.NamedMessage.defaultLevel">
            <summary>
            <para>
            Represents the default level at which this named message should be logged, if a specific level is not
            provided to the LogNamedMessage call. This field is set in the constructor, and is immutable.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessage.#ctor(System.String,System.String,System.Collections.Generic.IList{System.String},TopCoder.LoggingWrapper.Level)">
            <summary>
            Creates a new instance of a NamedMessage.
            </summary>
            <param name="text">The actual text that will be logged for this named message.</param>
            <param name="name">The name of the named message.</param>
            <param name="parameterNames">The names of the parameters to be used when logging the message.</param>
            <param name="defaultLevel">The default level at which this named message should be logged.</param>
            <exception cref="T:System.ArgumentNullException">If any argument is null.</exception>
            <exception cref="T:System.ArgumentException">If text or name is empty, or if parameterNames contains null or empty
            items, or level is invalid.</exception>
        </member>
        <member name="P:TopCoder.LoggingWrapper.NamedMessage.Name">
            <summary>
            <para>
            Represents the property to get the name of the named message.
            </para>
            </summary>
            <value>The name of the named message.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.NamedMessage.Text">
            <summary>
            <para>
            Represents the property to get the actual text that will be logged for this named message.
            </para>
            </summary>
            <value>The actual text that will be logged for this named message.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.NamedMessage.ParameterNames">
            <summary>
            <para>
            Represents the property to get a copy of the names of the parameters to be used when logging the message.
            </para>
            </summary>
            <value>The names of the parameters to be used when logging the message.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.NamedMessage.DefaultLevel">
            <summary>
            <para>
            Represents the property to get default level at which this named message should be logged.
            </para>
            </summary>
            <value>The default level at which this named message should be logged.</value>
        </member>
        <member name="T:TopCoder.LoggingWrapper.PluginException">
            <summary>
            Exception class for all pluggable implementation exceptions
            </summary>
            <author>TCSDEVELOPER, Mikhail_T</author>
            <version>2.0</version>
        </member>
        <member name="M:TopCoder.LoggingWrapper.PluginException.#ctor">
            <summary>
            Initializes a new instance of the PluginException class
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.PluginException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PluginException class with defined message
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ZeroConfigurationOption">
            <summary>
            <para>
            The ZeroConfigurationOption enum defines the valid values that can be specified in the
            default_config configuration setting to make use of the zero-configuration setup of this component.
            This value is read by the LogManager and then one of these enum values is passed to the
            InitializeZeroConfiguration method of the configuration specified logger.
            </para>
            <para>
            Each value of this enum describes an expected setup for the backend logging solution. However,
            backend solutions may not implement exactly the recommended functionality, so it is ultimately up
            to each backend solution to define what the values mean for that backend.
            </para>
            </summary>
            <remarks>
            <para>
            Enum is thread safe.
            </para>
            </remarks>
            <author>aubergineanode, TCSDEVELOPER</author>
            <version>3.0</version>
            <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ZeroConfigurationOption.Test">
            <summary>
            <para>
            Enum value for Test configuration.
            </para>
            <para>
            Recommended backend configuration:
            All messages should be logged to the file "../../test_files/log.txt".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ZeroConfigurationOption.Component">
            <summary>
            <para>
            Enum value for Component configuration.
            </para>
            <para>
            Recommended backend configuration:
            Messages at level INFO and above will be logged to the file "./log.txt".
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ZeroConfigurationOption.Certification">
            <summary>
            <para>
            Enum value for Certification configuration.
            </para>
            <para>
            Recommended backend configuration:
            Messages are logged to a dated folder (format "yyyy-mm-dd") in the logs subfolder.
            Only Info or higher messages are logged.
            Logs are rolled over on a regular basis (daily or 1MB size limit recommended).
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ZeroConfigurationOption.ClientDebug">
            <summary>
            <para>
            Enum value for ClientDebug configuration.
            </para>
            <para>
            Recommended backend configuration:
            Messages are logged to a dated folder (format "yyyy-mm-dd") in the logs subfolder.
            Only Info or higher messages are logged.
            Logs are rolled over on a regular basis (daily or 1MB size limit recommended).
            The maximum number of logs to be kept is limited (recommended 30 days of logs).
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ZeroConfigurationOption.ClientStress">
            <summary>
            <para>
            Enum value for ClientStress configuration.
            </para>
            <para>
            Recommended backend configuration:
            Messages are logged to a dated folder (format "yyyy-mm-dd") in the logs subfolder.
            Only Error or Failure messages are logged.
            Logs are rolled over on a regular basis (daily or 1MB size limit recommended).
            The maximum number of logs to be kept is limited (recommended 30 days of
            logs).
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ZeroConfigurationOption.Release">
            <summary>
            <para>
            Enum value for Release configuration.
            </para>
            <para>
            Recommended backend configuration:
            Messages are logged to a dated folder (format "yyyy-mm-dd") in the logs subfolder.
            Only Info or higher messages are logged.
            Logs are rolled over on a regular basis (daily or 1MB size limit recommended).
            The maximum number of logs to be kept is limited (recommended 30 days of logs).
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.AnotherSimpleLogger">
             <summary>
             A simple logger extends abstract class Logger for testing. The passed in arguments is stored
             in static fields so that they can be retrieved for testing. By presetting the exception to be
             thrown in methods, it can also be used for failure tests.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.AnotherSimpleLogger.lastMessage">
            <summary>
            Represents the message argument passed in to the Log method.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.AnotherSimpleLogger.lastDispose">
            <summary>
            Represents the flag whether method Dispose is called.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.AnotherSimpleLogger.ex">
            <summary>
            Represents the exception to be thrown in methods.
            Note that the exception will be thrown just once everytime it is set so that other tests
            won't be affected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.AnotherSimpleLogger.#ctor(System.String)">
            <summary>
            <para>
            Creates a new instance of Logger with the given log name. Delegates for the same named method
            in super class.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <exception cref="T:System.ArgumentNullException">If logname is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.AnotherSimpleLogger.#ctor(System.String,TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Creates a new instance of Logger with the given log name and default level. Delegates for the
            same named method in super class.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <param name="defaultLevel">The default logging level.</param>
            <exception cref="T:System.ArgumentNullException">If logname is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.AnotherSimpleLogger.#ctor(System.String,TopCoder.LoggingWrapper.Level,System.Collections.Generic.IDictionary{System.String,TopCoder.LoggingWrapper.NamedMessage})">
            <summary>
            <para>
            Creates a new instance of Logger with the log name and the default level and set of named
            messages. Delegates for the same named method in super class.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <param name="defaultLevel">The default logging level.</param>
            <param name="namedMessages">The dictionary mapping identifiers to named messages that should be
            used by this logger.</param>
            <exception cref="T:System.ArgumentNullException">If logname or namedMessages is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string, or namedMessages contains a
            null or empty key or any null values.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.AnotherSimpleLogger.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Creates a new instance of the Logger with setting loaded from the given configuration.
            Delegates for the same named method in super class.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
            <param name="configuration">The configuration object to load settings from.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
             If any of the configuration settings are missing or are invalid values.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.AnotherSimpleLogger.Dispose">
            <summary>
            <para>
            Disposes the resources held by the logger. Sets lastDispose true.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.AnotherSimpleLogger.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message using the underlying implementation with the specified logging level.
            All the arguments will be stored in name-like static fields.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
            <exception cref="T:System.ArgumentNullException">If message or param is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.AnotherSimpleLogger.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Used to determine if a specific logging level is supported by underlying implementation.
            Returns true.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
            <param name="level">The logging level to check.</param>
            <returns>true.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.AnotherSimpleLogger.LogNamedMessage(TopCoder.LoggingWrapper.Level,TopCoder.LoggingWrapper.NamedMessage,System.Object[])">
            <summary>
            <para>
            Logs the named message to the underlying implementation with the specified logging level.
            Delegates for the same named method in super class.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The named message to log.</param>
            <param name="param">The parameters to use in formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If any parameter is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message from
            the params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If there is a failure in the backend logging system.
            </exception>
        </member>
        <member name="P:TopCoder.LoggingWrapper.AnotherSimpleLogger.LastMessage">
            <summary>
            Represents the property to get the message argument passed in to the Log method.
            </summary>
            <value>The message argument passed in to the Log method.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.AnotherSimpleLogger.LastDispose">
            <summary>
            Represents the property to get whether method Dispose is called. The property only return
            true once for each call to Dispose.
            </summary>
            <value>The param argument passed in to the Log method.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.AnotherSimpleLogger.Ex">
            <summary>
            Represents the property to set the exception to thrown in methods.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ConfigExceptionUnitTest">
             <summary>
             Unit test for ConfigException.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ConfigExceptionUnitTest.MESSAGE">
            <summary>
            <para>
            The error message used for testing.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ConfigExceptionUnitTest.CAUSE">
            <summary>
            <para>
            The inner cause used for testing.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ConfigExceptionUnitTest.exception">
            <summary>
            <para>
            An instance of ConfigException used for testing.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ConfigExceptionUnitTest.Test0ParamCtor">
            <summary>
            <para>
            Accuracy test for the zero parameter constructor.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ConfigExceptionUnitTest.Test1ParamCtor">
            <summary>
            <para>
            Accuracy test for the one parameter constructor. The message should be set properly.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ConfigExceptionUnitTest.Test2ParamCtor">
            <summary>
            <para>
            Accuracy test for the two parameter constructor. The message and inner cause should be set properly.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ConfigExceptionUnitTest.TestSerialization">
            <summary>
            <para>
            Ensures that the serialization constructor was given and set the message and inner cause properly.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.CoverageExcludeAttribute">
             <summary>
             This a is custom attribute controls the action of the NCover.
             <para>We use this attribute to exclude the coverage of mock classes from the coverage report.</para>
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="T:TopCoder.LoggingWrapper.Demo">
             <summary>
             <para>
             Demo of Logging Wrapper 3.0.
             </para>
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Demo.RunAfterAllTests">
            <summary>
            <para>
            Disposes WCF objects and clears the custom event logs after all tests.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Demo.TestDemoLogManager">
            <summary>
            <para>
            Demo 1 : Create Logger from the LogManage.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Demo.TestDemoLogger">
            <summary>
            <para>
            Demo 2 : Log message with the Logger directly.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Demo.TestDemoZeroConfiguration">
            <summary>
            <para>
            Demo 3 : Use zero-configuration option.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Demo.TestDemoELSAppender">
            <summary>
            <para>
            Demo 4 : Use ELS custom appender for log4net.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Demo.TestDemoLoggingWrapperTraceListener">
            <summary>
            <para>
            Demo 4 : Use ELS custom appender for log4net.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.DiagnosticImplUnitTest">
             <summary>
             Unit test for DiagnosticImpl.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.SOURCE">
            <summary>
            A string as source of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.DEFAULT_LEVEL">
            <summary>
            A level as level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.LEVEL">
            <summary>
            A level as level of message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.MESSAGE">
            <summary>
            A string as message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.PARAMETERS">
            <summary>
            An array of strings as parameters for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.FORMATTED">
            <summary>
            A string as formatted message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.config">
            <summary>
            Represents IConfiguration instance for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.logger">
            <summary>
            An instance of DiagnosticImpl for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.SetUp">
            <summary>
            Creates instances for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.RunAfterAllTests">
            <summary>
            <para>
            Clears the custom event logs after all tests.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestCtorAccuracy">
            <summary>
            Tests DiagnosticImpl(IConfiguration) for accuracy. Ensures all the fields are set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestCtorWithNull">
            <summary>
            Tests Log4NETImpl(IConfiguration) with null text.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestCtorWithUrlAbsent">
            <summary>
            Tests constructor with "source" attribute missing in configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestCtorWithEmptyUrl">
            <summary>
            Tests constructor with empty value of "source" attribute in configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestDisposeAccuracy">
            <summary>
            Tests Dispose for accuracy.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestIsLevelEnabledAccuracy">
            <summary>
            Tests IsLevelEnabled for accuracy. Ensures all levels are supported.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestLogAccuracy">
            <summary>
            Tests Log for accuracy. Ensures message are logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestLogLevelMapping">
            <summary>
            Tests Log for accuracy. Ensures all levels are mapped correctly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestLogWithOFF">
            <summary>
            Tests Log for accuracy. Ensures message won't be logged for OFF level.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestLogWithNullMessage">
            <summary>
            Tests Log with null message.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestLogWithNullParameters">
            <summary>
            Tests Log with null parameters.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestLogWithMalformedMessage">
            <summary>
            Tests Log with message and parameters not matching.
            MessageFormattingException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestInitializeZeroConfigurationUrlAbsent">
            <summary>
            Tests InitializeZeroConfiguration with "source" attribute absent.
            Ensures the "source" attribute is set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestInitializeZeroConfigurationUrlExist">
            <summary>
            Tests InitializeZeroConfiguration with "source" attribute exist.
            Ensures the "source" attribute is not changed.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestInitializeZeroConfigurationWithNull">
            <summary>
            Tests InitializeZeroConfiguration with null configuration.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplUnitTest.TestInitializeZeroConfigurationWithConfigError">
            <summary>
            Tests InitializeZeroConfiguration with error occurs when accessing the configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest">
             <summary>
             Unit test for ELSAppender.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.LOGGER_NAME">
            <summary>
            A string as name of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.SOURCE">
            <summary>
            A string as source of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.MESSAGE">
            <summary>
            A string as message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.loggingEvent">
            <summary>
            Instance of LoggingEvent for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.level">
            <summary>
            A log4net.Core.Level for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.appender">
            <summary>
            Instance of ELSAppender for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.config">
            <summary>
            <para>Configuration used to create object.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.SetUp">
             <summary>
             Sets up test environment.
             </summary>
            
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.RunAfterAllTests">
            <summary>
            <para>
            Clears the custom event logs after all tests.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.TestCtorAccuracy2">
            <summary>
            Tests constructor for accuracy.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.TestCtorWithNull">
            <summary>
            Tests constructor with null argument.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.TestAppendAccuracy">
            <summary>
            Tests Append for accuracy. Ensures the message are sent to service properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.TestAppendLevelMapping">
            <summary>
            Tests Append for accuracy. Ensures the levels are mapped properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.TestAppendWithNull">
            <summary>
            Tests Append with null argument.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.TestAppendWithServiceError">
            <summary>
            Tests Append with error occurs when forwarding to service.
            LoggingException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.TestOnCloseAccuracy">
            <summary>
            Tests OnClose for accuracy. Ensures the service is disposed.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.MockELSAppender">
             <summary>
             A class extends ELSAppender for testing the protect method.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.MockELSAppender.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.MockELSAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            <para>
            Appends the logging event to the backend logging service.
            Delegate to the same method in super class.
            </para>
            </summary>
            <param name="loggingEvent">The logging event to append.</param>
            <exception cref="T:System.ArgumentNullException">If loggingEvent is null</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If the call to the logging service fails.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSAppenderUnitTest.MockELSAppender.OnClose">
            <summary>
            <para>
            Releases the resource used by this appender.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest">
             <summary>
             Unit test for ELSImpl.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.LOGGER_NAME">
            <summary>
            A string as name of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.SOURCE">
            <summary>
            A string as source of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.DEFAULT_LEVEL">
            <summary>
            A level as level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.LEVEL">
            <summary>
            A level as level of message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.MESSAGE">
             <summary>
            
             A string as message for testing.
             </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.config">
            <summary>
            Represents IConfiguration instance for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.els">
            <summary>
            An instance of ELSImpl for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.SetUp">
             <summary>
             Sets up test environment.
             </summary>
            
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.RunAfterAllTests">
            <summary>
            <para>
            Clears the custom event logs after all tests.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestCtorAccuracy">
            <summary>
            Tests constructor for accuracy. Ensures all the fields are set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestCtorWithNull">
            <summary>
            Tests constructor with null text.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestCtorBadConfig">
            <summary>
            Tests constructor with bad configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestDisposeAccuracy">
            <summary>
            Tests Dispose for accuracy. Ensures the service won't work after Dispose is called.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestIsLevelEnabledAccuracy">
            <summary>
            Tests IsLevelEnabled for accuracy. Ensures all levels are supported.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestLogAccuracy">
            <summary>
            Tests Log for accuracy. Ensures all the parameters are sent to service.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestLogWithOFF">
            <summary>
            Tests Log for accuracy. Ensures message won't be logged for OFF level.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestLogWithNullMessage">
            <summary>
            Tests Log with null message.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestLogWithNullParameters">
            <summary>
            Tests Log with null parameters.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ELSImplUnitTest.TestLogWithServiceError">
            <summary>
            Tests Log with error occurs when forwarding to service.
            LoggingException is expected.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl">
             <summary>
             A dummy implementation of <see cref="T:TopCoder.LoggingWrapper.ELS.ILoggingService"/> used during
             testing.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.LOGGER_NAME">
            <summary>
            A string as name of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.DEFAULT_LEVEL">
            <summary>
            A level as level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.SOURCE">
            <summary>
            A string as source of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.fail">
            <summary>
            <para>The flag which when it is set, causes the log method to fail.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.#ctor">
            <summary>
            <para>Default constructor.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.CreateConfig">
            <summary>
            <para>Creates a configuration to pass to the constructor.</para>
            </summary>
            <returns>The created configuration</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>Constructor.</para>
            </summary>
            <param name="config">The <see cref="T:TopCoder.Configuration.IConfiguration"/> to configure
            object from.</param>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.disposed">
            <summary>
            <para>Flag indicating whether the <see cref="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.Dispose"/> method is called.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.Log(System.String,System.String[],TopCoder.LoggingWrapper.Level,System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, logging level, and message parameters.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="level">
             The logging level.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.LogDebug(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.DEBUG</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.LogInfo(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.INFO</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.LogWarning(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.WARN</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.LogError(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.ERROR</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.LogFatal(System.String,System.String[],System.String,System.String[])">
             <summary>
             <para>
             Log the message with the specified originator, context, and message parameters using
             <c>Level.FATAL</c> logging level.
             </para>
             </summary>
            
             <param name="originator">
             A string value identifying the originator of the log event. It can not be <c>null</c>,
             but can be empty.
             </param>
             <param name="context">
             The additional information that may be displayed as a part of the log entry. It can be
             <c>null</c>, but can not be an empty array. The element of it can not be null, but can
             be empty.
             </param>
             <param name="message">
             The message to be logged. It can not be null nor empty after trimming.
             </param>
             <param name="parameters">
             The message parameters. It can be <c>null</c> or an empty array. The element of it can
             also be empty or null.
             </param>
            
             <exception cref="T:System.ServiceModel.FaultException`1">
             <para>
             If any exception occurs during execution. All the argument validation exceptions and
             business exceptions should be wrapped by the <see cref="T:System.ServiceModel.FaultException`1"/>.
             </para>
             </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ELS.ILoggingServiceDummyImpl.Dispose">
            <summary>
            <para>Sets the disposed flag.</para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest">
             <summary>
             Unit test for EnterpriseLibraryLogger.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.LOGGER_NAME">
            <summary>
            A string as name of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.SOURCE">
            <summary>
            A string as source of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.DEFAULT_LEVEL">
            <summary>
            A level as level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.LEVEL">
            <summary>
            A level as level of message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.MESSAGE">
            <summary>
            A string as message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.CATEGORY">
            <summary>
            A string as category for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.PARAMETERS">
            <summary>
            An array of strings as parameters for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.FORMATTED">
            <summary>
            A string as formatted message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.config">
            <summary>
            Represents IConfiguration instance for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.logger">
            <summary>
            An instance of EnterpriseLibraryLogger for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.RunBeforeAllTests">
            <summary>
            <para>
            Creats custom event log before all tests.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.SetUp">
             <summary>
             Sets up test environment.
             </summary>
            
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.RunAfterAllTests">
            <summary>
            <para>
            Clears the custom event logs after all tests.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestCategoryAccuracy">
            <summary>
            Tests Category for accuracy. Ensures the field is returned properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestCtorAccuracy">
            <summary>
            Tests constructor for accuracy. Ensures all the fields are set properly. Also tests property
            Category.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestCtorWithNull">
            <summary>
            Tests constructor with null text.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestCtorWithCategoryAbsent">
            <summary>
            Tests constructor with "Category" attribute missing in configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestCtorWithEmptyCategory">
            <summary>
            Tests constructor with empty value of "Category" attribute in configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestCtorWithMultiplyCategory">
            <summary>
            Tests constructor with multiply values of "Category" attribute in configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestDisposeAccuracy">
            <summary>
            Tests Dispose for accuracy.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestIsLevelEnabledAccuracy">
            <summary>
            Tests IsLevelEnabled for accuracy. Ensures all levels except OFF are supported.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestLogAccuracy">
            <summary>
            Tests Log for accuracy. Ensures all the parameters are sent to service.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestLogWithOFF">
            <summary>
            Tests Log for accuracy. Ensures message won't be logged for OFF level.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestLogWithNullMessage">
            <summary>
            Tests Log with null message.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestLogWithNullParameters">
            <summary>
            Tests Log with null parameters.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestLogWithMalformedMessage">
            <summary>
            Tests Log with message and parameters not matching.
            MessageFormattingException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestInitializeZeroConfigurationUrlAbsent">
            <summary>
            Tests InitializeZeroConfiguration with "Category" attribute absent.
            Ensures the "Category" attribute is set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestInitializeZeroConfigurationUrlExist">
            <summary>
            Tests InitializeZeroConfiguration with "Category" attribute exist.
            Ensures the "Category" attribute is not changed.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestInitializeZeroConfigurationWithNull">
            <summary>
            Tests InitializeZeroConfiguration with null configuration.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.EnterpriseLibraryLoggerUnitTest.TestInitializeZeroConfigurationWithConfigError">
            <summary>
            Tests InitializeZeroConfiguration with error occurs when accessing the configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest">
             <summary>
             Unit test for LoggingWrapperTraceListener.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.LOGGER_NAME">
            <summary>
            A string as log name for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.MESSAGE">
            <summary>
            A string as message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.CATEGORY">
            <summary>
            A string as category for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.logger">
            <summary>
            An logger as underlying logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.listener">
            <summary>
            An instance of LoggingWrapperTraceListener for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.SetUp">
            <summary>
            Creates instances for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestCtorAccuracy1">
            <summary>
            Tests constructor for accuracy.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestCtorAccuracy2">
            <summary>
            Tests constructor for accuracy.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestCtorWithNullLogger">
            <summary>
            Tests constructor with null logger.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestCloseAccuracy">
            <summary>
            Tests Close for accuracy. Ensures the underlying logger is disposed.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteObjectAccuracy">
            <summary>
            Tests Write(object) for accuracy. Ensures the message is written properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteObjectWithErrorIgnore">
            <summary>
            Tests Write(object) with error occurs when logging.
            Eusures exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteStringAccuracy">
            <summary>
            Tests Write(string) for accuracy. Ensures the message is written properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteStringWithErrorIgnore">
            <summary>
            Tests Write(string) with error occurs when logging.
            Eusures exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteObjectCategoryAccuracy">
            <summary>
            Tests Write(object, string) for accuracy. Ensures the message is written properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteObjectCategoryWithErrorIgnore">
            <summary>
            Tests Write(object, string) with error occurs when logging.
            Eusures exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteStringCategoryAccuracy">
            <summary>
            Tests Write(string, string) for accuracy. Ensures the message is written properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteStringCategoryWithErrorIgnore">
            <summary>
            Tests Write(string, string) with error occurs when logging.
            Eusures exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteLineObjectAccuracy">
            <summary>
            Tests WriteLine(object) for accuracy. Ensures the message is written properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteLineObjectWithErrorIgnore">
            <summary>
            Tests WriteLine(object) with error occurs when logging.
            Eusures exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteLineStringAccuracy">
            <summary>
            Tests WriteLine(string) for accuracy. Ensures the message is written properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteLineStringWithErrorIgnore">
            <summary>
            Tests WriteLine(string) with error occurs when logging.
            Eusures exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteLineObjectCategoryAccuracy">
            <summary>
            Tests WriteLine(object, string) for accuracy. Ensures the message is written properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteLineObjectCategoryWithErrorIgnore">
            <summary>
            Tests WriteLine(object, string) with error occurs when logging.
            Eusures exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteLineStringCategoryAccuracy">
            <summary>
            Tests WriteLine(string, string) for accuracy. Ensures the message is written properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.EntLib.LoggingWrapperTraceListenerUnitTest.TestWriteLineStringCategoryWithErrorIgnore">
            <summary>
            Tests WriteLine(string, string) with error occurs when logging.
            Eusures exception will be ignored.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest">
             <summary>
             Unit test for ExceptionSafeLogger.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.LOGGER_NAME">
            <summary>
            A string as name of logger for ExceptionSafeLogger.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.EXCEPTION_LOGGER_NAME">
            <summary>
            A string as name of exception log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.DEFAULT_LEVEL">
            <summary>
            A level as default level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.LEVEL">
            <summary>
            A level as level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.NAMEDMESSAGE">
            <summary>
            A string as name of named message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.MESSAGE">
            <summary>
            A string as message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.PARAMETER_NAMES">
            <summary>
            An array of strings as names of parameters for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.PARAMETERS">
            <summary>
            An array of strings as parameters for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.config">
            <summary>
            Represents IConfiguration instance for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.simpleLogger">
            <summary>
            A logger used as underlying logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.anotherLogger">
            <summary>
            A logger used as exception logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.namedMsg">
            <summary>
            An instance of NamedMessage for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.logger">
            <summary>
            An instance of ExceptionSafeLogger for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.SetUp">
            <summary>
            Creates instances for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestCtorAccuracy">
            <summary>
            Tests constructor for accuracy. Ensures all fields are set properly. Also tests the
            properties.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestCtorWithNullUnderlyingLogger">
            <summary>
            Tests constructor with null underlying logger.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestCtorWithNullExceptionLogger">
            <summary>
            Tests constructor with null exception logger.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestDisposeAccuracy">
            <summary>
            Tests Dispose for accuracy, Ensure the underlying logger and exception logger are disposed.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestDisposeWitheUnderlyingLoggerError">
            <summary>
            Tests Dispose with exception thrown by underlying exception.
            Eusures the exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestDisposeWitheExceptionLoggerError">
            <summary>
            Tests Dispose with exception thrown by exception exception.
            Eusures the exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestIsLevelEnabledAccuracy">
            <summary>
            Tests IsLevelEnabled for accuracy. Ensures behavior of the method is the same as that of the
            underlying logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestIsLevelEnabledWithUnderlyingLoggerError">
            <summary>
            Tests IsLevelEnabled with exception thrown by underlying logger. Ensures exception will
            be logged by exception logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestIsLevelEnabledWithExceptionLoggerError">
            <summary>
            Tests IsLevelEnabled with exception thrown by underlying logger. Ensures if error occurs
            when exception logger logging the message, the exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogAccuracy1">
            <summary>
            Tests Log(Level, string, params object[]) for accuracy. Ensures behavior of the method is the
            same as that of the underlying logger.
            Ensures the message will be logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogWithUnderlyingLoggerError1">
            <summary>
            Tests Log(Level, string, params object[]) with exception thrown by underlying logger. Ensures
            exception will be logged by exception logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogWithExceptionLoggerError1">
            <summary>
            Tests Log(Level, string, params object[]) with exception thrown by underlying logger. Ensures
            if error occurs when exception logger logging the message, the exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogAccuracy2">
            <summary>
            Tests Log(string, params object[]) for accuracy. Ensures behavior of the method is the
            same as that of the underlying logger.
            Ensures the message will be logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogWithUnderlyingLoggerError2">
            <summary>
            Tests Log(string, params object[]) with exception thrown by underlying logger. Ensures
            exception will be logged by exception logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogWithExceptionLoggerError2">
            <summary>
            Tests Log(string, params object[]) with exception thrown by underlying logger. Ensures
            if error occurs when exception logger logging the message, the exception will be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageAccuracy1">
            <summary>
            Tests LogNamedMessage(Level, NamedMessage, params object[]) for accuracy. Ensures behavior of
            the method is the same as that of the underlying logger.
            Ensures the message will be logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageWithUnderlyingLoggerError1">
            <summary>
            Tests LogNamedMessage(Level, NamedMessage, params object[]) with exception thrown by underlying
            logger. Ensures exception will be logged by exception logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageWithExceptionLoggerError1">
            <summary>
            Tests LogNamedMessage(Level, NamedMessage, params object[]) with exception thrown by underlying
            logger. Ensures if error occurs when exception logger logging the message, the exception will
            be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageAccuracy2">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) for accuracy. Ensures behavior of
            the method is the same as that of the underlying logger.
            Ensures the message will be logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageWithUnderlyingLoggerError2">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) with exception thrown by underlying
            logger. Ensures exception will be logged by exception logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageWithExceptionLoggerError2">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) with exception thrown by underlying
            logger. Ensures if error occurs when exception logger logging the message, the exception will
            be ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageAccuracy3">
            <summary>
            Tests LogNamedMessage(string, params object[]) for accuracy. Ensures behavior of
            the method is the same as that of the underlying logger.
            Ensures the message will be logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageWithUnderlyingLoggerError3">
            <summary>
            Tests LogNamedMessage(string, params object[]) with exception thrown by underlying
            logger. Ensures exception will be logged by exception logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ExceptionSafeLoggerUnitTest.TestLogNamedMessageWithExceptionLoggerError3">
            <summary>
            Tests LogNamedMessage(string, params object[]) with exception thrown by underlying
            logger. Ensures if error occurs when exception logger logging the message, the exception will
            be ignored.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.HelperUnitTest">
             <summary>
             Unit test for Helper.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.HelperUnitTest.NAME">
            <summary>
            Represents a string as name for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.HelperUnitTest.config">
            <summary>
            Represents IConfiguration instance for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.SetUp">
            <summary>
            Creates configuration for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateNotNullWithNull">
            <summary>
            Tests method ValidateNotNull with null parameter.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateNotNullWithNotNull">
            <summary>
            Tests method ValidateNotNull with valid parameter.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateNotEmptyStringWithEmpty">
            <summary>
            Tests method ValidateNotEmptyString with empty string parameter.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateNotEmptyStringWithNotEmpty">
            <summary>
            Tests method ValidateNotEmptyString with valid parameter.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateNotEmptyStringWithNull">
            <summary>
            Tests method ValidateNotEmptyString with null parameter. Null should be considered valid.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateNotNullNotEmptyStringWithNull">
            <summary>
            Tests method ValidateNotNullNotEmptyString with null parameter.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateNotNullNotEmptyStringWithEmpty">
            <summary>
            Tests method ValidateNotNullNotEmptyString with empty string parameter.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateNotNullNotEmptyStringWithValid">
            <summary>
            Tests method ValidateNotNullNotEmptyString with valid parameter.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringAttributeWithRequiredAbsent">
            <summary>
            Tests method GetStringAttribute, when required attiribute absent.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringAttributeWithEmpty">
            <summary>
            Tests method GetStringAttribute, when attiribute is empty string.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringAttributeWithMultiply">
            <summary>
            Tests method GetStringAttribute, when attiribute is of multiply values.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringAttributeWithRequiredExist">
            <summary>
            Tests method GetStringAttribute for accuracy with required attiribute.
            The established value should be equal to received.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringAttributeWithOptionalExist">
            <summary>
            Tests method GetStringAttribute for accuracy with optional attiribute.
            The established value should be equal to received.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringAttributeWithOptionalAbsent">
            <summary>
            Tests method GetStringAttribute for accuracy with optional attiribute absent.
            The returned value should be null.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetBooleanAttributeWithDefault">
            <summary>
            Tests GetBooleanAttribute method, when attiribute is null.
            Method should returns a default value.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetBooleanAttributeWithValid">
            <summary>
            Tests GetBooleanAttribute method for accuracy.
            The established value should be equal to received.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetBooleanAttributeWithBoolean">
            <summary>
            Tests GetBooleanAttribute method with boolean type value.
            The established value should be equal to received.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetBooleanAttributeWithMalformedAttribute">
            <summary>
            Tests GetBooleanAttribute method when attiribute is not boolean.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetBooleanAttributeWithMultiply">
            <summary>
            Tests method GetBooleanAttribute, when attiribute is of multiply values.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetLevelAttributeWithDefault">
            <summary>
            Tests GetLevelAttribute method, when attiribute is null.
            Method should returns a default value.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetLevelAttributeWithValid">
            <summary>
            Tests GetLevelAttribute method for accuracy.
            The established value should be equal to received.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetLevelAttributeWithMalformedAttribute">
            <summary>
            Tests GetLevelAttribute method when attiribute is not level.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetLevelAttributeWithMultiply">
            <summary>
            Tests method GetLevelAttribute, when attiribute is of multiply values.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringListAttributeWithRequiredAbsent">
            <summary>
            Tests method GetStringListAttribute, when required attiribute absent.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringListAttributeContainEmpty">
            <summary>
            Tests method GetStringListAttribute, when attiribute contains empty string.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringListAttributeWithRequiredExist">
            <summary>
            Tests method GetStringListAttribute for accuracy with required attiribute.
            The established value should be equal to received.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringListAttributeWithOptionalExist">
            <summary>
            Tests method GetStringListAttribute for accuracy with optional attiribute.
            The established value should be equal to received.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestGetStringListAttributeWithOptionalAbsent">
            <summary>
            Tests method GetStringListAttribute for accuracy with optional attiribute absent.
            The returned value should be empty list.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateLoggerNotNullWithNull">
            <summary>
            Tests method ValidateLoggerNotNull with null.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.HelperUnitTest.TestValidateLoggerNotNullWithValid">
            <summary>
            Tests method ValidateLoggerNotNull with valid parameter.
            The logger should be returned.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest">
             <summary>
             Unit test for LevelFilteredLogger.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.LOGGER_NAME">
            <summary>
            A string as name of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.DEFAULT_LEVEL">
            <summary>
            A level as default level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.LEVEL">
            <summary>
            A level as level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.NAMEDMESSAGE">
            <summary>
            A string as name of named message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.MESSAGE">
            <summary>
            A string as message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.PARAMETER_NAMES">
            <summary>
            An array of strings as names of parameters for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.PARAMETERS">
            <summary>
            An array of strings as parameters for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.simpleLogger">
            <summary>
            A logger used as underlying logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.namedMsg">
            <summary>
            An instance of NamedMessage for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.filteredLevels">
            <summary>
            A list of levels to be filtered for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.logger">
            <summary>
            An instance of LevelFilteredLogger for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.SetUp">
            <summary>
            Creates instances for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestCtorAccuracy">
            <summary>
            Tests constructor for accuracy. Ensures all fields are set properly. Also tests the
            properties.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestCtorWithNullLogger">
            <summary>
            Tests constructor with null logger.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestCtorWithNullFilteredLevels">
            <summary>
            Tests constructor with null filteredLevels.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestDisposeAccuracy">
            <summary>
            Tests Dispose for accuracy, Ensure the underlying logger is disposed.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestIsLevelEnabledAccuracy">
            <summary>
            Tests IsLevelEnabled for accuracy. Ensures behavior of the method is the same as that of the
            underlying logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestLogWithoutFiltered">
            <summary>
            Tests Log(Level, string, params object[]) with level outside the filteredLevels list.
            Ensures the message will be logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestLogWithFiltered">
            <summary>
            Tests Log(Level, string, params object[]) with level inside the filteredLevels list.
            Ensures the message won't be logged.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestLogNamedMessageWithoutFiltered">
            <summary>
            Tests LogNamedMessage(Level, NamedMessage, params object[]) with level outside the
            filteredLevels list.
            Ensures the message will be logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestLogNamedMessageWithFiltered">
            <summary>
            Tests LogNamedMessage(Level, NamedMessage, params object[]) with level inside the
            filteredLevels list.
            Ensures the message won't be logged.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestLogNamedMessageIdentifierWithoutFiltered">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) with level outside the
            filteredLevels list.
            Ensures the message will be logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelFilteredLoggerUnitTest.TestLogNamedMessageIdentifierWithFiltered">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) with level inside the
            filteredLevels list.
            Ensures the message won't be logged.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LevelUnitTest">
             <summary>
             Unit test for Level.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>1.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LevelUnitTest.TestLevel">
            <summary>
            Tests the accuracy of definition Level.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.Log4NETImplUnitTest">
             <summary>
             Unit test for Log4NETImpl.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.LOGNAME">
            <summary>
            A string as name of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.APPLICATION">
            <summary>
            A string as name of application log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.SOURCE">
            <summary>
            A string as source of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.MACHINE_NAME">
            <summary>
            A string as machine name of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.DEFAULT_LEVEL">
            <summary>
            A level as level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.LEVEL">
            <summary>
            A level as level of message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.CONFIG_FILE">
            <summary>
            A string as config file for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.DEFAULT_FILE">
            <summary>
            A string as default configuration file for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.NAMEDMESSAGE">
            <summary>
            A string as name of named message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.MESSAGE">
            <summary>
            A string as message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.PARAMETER_NAMES">
            <summary>
            An array of strings as names of parameters for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.PARAMETERS">
            <summary>
            An array of strings as parameters for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.FORMATTED">
            <summary>
            A string as formatted message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.NAMED_FORMATTED">
            <summary>
            A string as formatted message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.config">
            <summary>
            Represents IConfiguration instance for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.namedMsg">
            <summary>
            An instance of NamedMessage for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplUnitTest.logger">
            <summary>
            An instance of Log4NETImpl for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.RunBeforeAllTests">
            <summary>
            <para>
            Creates custom event log for testing.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.SetUp">
            <summary>
            Creates instances for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.RunAfterAllTests">
            <summary>
            <para>
            Clears the custom event logs after all tests.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestCtorAccuracy">
            <summary>
            Tests Log4NETImpl(IConfiguration) for accuracy. Ensures all the fields are set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestCtorWithNull">
            <summary>
            Tests Log4NETImpl(IConfiguration) with null text.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestCtorWithUrlAbsent">
            <summary>
            Tests constructor with "config_file" attribute missing in configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestCtorWithInvalidUrl">
            <summary>
            Tests constructor with invalid value of "config_file" attribute in configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestDisposeAccuracy">
            <summary>
            Tests Dispose for accuracy.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestIsLevelEnabledAccuracy">
            <summary>
            Tests IsLevelEnabled for accuracy. Ensures all levels are supported.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogAccuracy">
            <summary>
            Tests Log for accuracy. Ensures message are logged properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogLevelMapping">
            <summary>
            Tests Log for accuracy. Ensures all levels are mapped correctly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogWithOFF">
            <summary>
            Tests Log for accuracy. Ensures message won't be logged for OFF level.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogWithNullMessage">
            <summary>
            Tests Log with null message.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogWithNullParameters">
            <summary>
            Tests Log with null parameters.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogWithMalformedMessage">
            <summary>
            Tests Log with message and parameters not matching.
            MessageFormattingException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogNamedMessageAccuracy">
            <summary>
            Tests LogNamedMessage for accuracy. Ensures message are logged properly
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogNamedMessageLevelMapping">
            <summary>
            Tests LogNamedMessage for accuracy. Ensures all levels are mapped correctly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogNamedMessageWithOFF">
            <summary>
            Tests LogNamedMessage for accuracy. Ensures message won't be logged for OFF level.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogNamedMessageWithNullNamedMessage">
            <summary>
            Tests LogNamedMessage with null named message.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogNamedMessageWithNullParameters">
            <summary>
            Tests LogNamedMessage with null parameters.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLogNamedMessageWithParametersNotMatch">
            <summary>
            Tests LogNamedMessage with number of parameters and number of parameter in message not matching.
            MessageFormattingException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationBothExist">
            <summary>
            Tests InitializeZeroConfiguration with "config_file" attributes exist and the file exist.
            Ensures the attribute and file won't change.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationFileExist">
            <summary>
            Tests InitializeZeroConfiguration with "config_file" attributes not exist but the file exist.
            Ensures the attribute is set and file won't change.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationAttributeExist">
            <summary>
            Tests InitializeZeroConfiguration with "config_file" attributes exist but the file not exist.
            Ensures the attribute won't change and file is created.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationNeitherExist">
            <summary>
            Tests InitializeZeroConfiguration with neither "config_file" attributes or the file exist.
            Ensures the attribute is set and file is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationWithNullConfiguration">
            <summary>
            Tests InitializeZeroConfiguration with null configuration.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationWithConfigurationError">
            <summary>
            Tests InitializeZeroConfiguration with error occurs when accessing the configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationWithTest">
            <summary>
            Tests InitializeZeroConfiguration with Test option.
            Ensures configuration file is created with proper content.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationWithComponent">
            <summary>
            Tests InitializeZeroConfiguration with Component option.
            Ensures configuration file is created with proper content.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationWithCertification">
            <summary>
            Tests InitializeZeroConfiguration with Certification option.
            Ensures configuration file is created with proper content.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationWithClientDebug">
            <summary>
            Tests InitializeZeroConfiguration with Client Debug option.
            Ensures configuration file is created with proper content.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationWithClientStress">
            <summary>
            Tests InitializeZeroConfiguration with Client Stress option.
            Ensures configuration file is created with proper content.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestInitializeZeroConfigurationWithRelease">
            <summary>
            Tests InitializeZeroConfiguration with Release option.
            Ensures configuration file is created with proper content.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.CheckDefaultFile(System.String,System.String[],System.String)">
            <summary>
            Checks whether the context of the default configuration file is correct.
            </summary>
            <param name="appenderType">The expected type of appender.</param>
            <param name="appendArgs">The expected arguments of appender.</param>
            <param name="level">The expected level of root.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.CheckAppenderElement(System.Xml.XmlNode,System.String,System.String[])">
            <summary>
            Checks whether the context of the appender elemnt in configuration file is correct.
            </summary>
            <param name="appender">The appender element to check.</param>
            <param name="appenderType">The expected type of appender.</param>
            <param name="appendArgs">The expected arguments of appender.</param>
            <returns>the name of appender.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.CheckRootElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Checks whether the context of the appender elemnt in configuration file is correct.
            </summary>
            <param name="root">The root element.</param>
            <param name="appenderName">The expected name of appender.</param>
            <param name="level">The expected level.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.CheckElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Checks whether the given node is of given name and has an attribute named "value" of given value.
            </summary>
            <param name="node">The node to check.</param>
            <param name="name">The expected name of node.</param>
            <param name="value">The expected value of attribute "value".</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplUnitTest.TestLog4NETLevel">
            <summary>
            Tests the accuracy of definition Log4NETImpl.Log4NETLevel.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LoggerUnitTest">
             <summary>
             Unit test for Logger. SimpleLogger inherited from Logger is used for testing.
             Note that only the new or changed functions in 3.0 are tested.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.MESSAGE">
            <summary>
            A string as message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.LOGNAME">
            <summary>
            A string as name of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.LEVEL">
            <summary>
            A level as default level of logger for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.NAME1">
            <summary>
            A string as name of message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.NAME2">
            <summary>
            A string as name of message for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.msgs">
            <summary>
            A dictionary of named messages for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.namedMsg">
            <summary>
            An instance of NamedMessage for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.config">
            <summary>
            Represents IConfiguration instance for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerUnitTest.logger">
            <summary>
            An instance of SimpleLogger for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.SetUp">
            <summary>
            Creates instances for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorAccuracy1">
            <summary>
            Tests Logger(string, Level, IDictionary) for accuracy. Ensures field namedMessages is set
            properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorAccuracy2">
            <summary>
            Tests Logger(string, Level) for accuracy. Ensures field namedMessages is set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorAccuracy3">
            <summary>
            Tests Logger(string) for accuracy. Ensures field namedMessages is set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithNullDictionary">
            <summary>
            Tests Logger(string, Level, IDictionary) with null namedMessages.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithEmptyKeyInDictionary">
            <summary>
            Tests Logger(string, Level, IDictionary) with empty key in namedMessages.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithNullValueInDictionary">
            <summary>
            Tests Logger(string, Level, IDictionary) with null value in namedMessages.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorConfigAccuracy">
            <summary>
            Tests Logger(IConfiguration) for accuracy. Ensures all fields are set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorConfigNoDefaultLevel">
            <summary>
            Tests Logger(IConfiguration) without "default_level" in configuration. Ensures the default
            level is Level.DEBUG.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorConfigNoNamedMessages">
            <summary>
            Tests Logger(IConfiguration) without "NamedMessages" in configuration. Ensures the
            namedMessages dictionary is empty.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorConfigNoDefaultLevelInNamedMessage">
            <summary>
            Tests Logger(IConfiguration) without "default_level" in configuration of the first named
            message. Ensures the default level is the default level of logger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorConfigNoParametersInNamedMessage">
            <summary>
            Tests Logger(IConfiguration) without "parameters" in configuration of the first named
            message. Ensures the parameters of named message is empty.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithNullConfiguration">
            <summary>
            Tests Logger(IConfiguration) with null configuration.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithoutLoggerName">
            <summary>
            Tests Logger(IConfiguration) with "logger_name" attribute absent.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithInvalidLoggerName">
            <summary>
            Tests Logger(IConfiguration) with invalid value of "logger_name" attribute.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithMutiplyLoggerName">
            <summary>
            Tests Logger(IConfiguration) with multiply values of "logger_name" attribute.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithInvalidDefaultLevel">
            <summary>
            Tests Logger(IConfiguration) with invalid value of "default_level" attribute.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithMultiplyDefaultLevel">
            <summary>
            Tests Logger(IConfiguration) with multiply values of "default_level" attribute.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithoutTextInNamedMessage">
            <summary>
            Tests Logger(IConfiguration) without "text" attribute in named message configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithInvalidTextInNamedMessage">
            <summary>
            Tests Logger(IConfiguration) with invalid value of "text" attribute in named message
            configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithMutiplyTextInNamedMessage">
            <summary>
            Tests Logger(IConfiguration) with mutiply values of "text" attribute in named message
            configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithInvalidDefaultLevelInNamedMessge">
            <summary>
            Tests Logger(IConfiguration) with invalid value of "default_level" attribute in named message
            configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithMultiplyDefaultLevelInNamedMessge">
            <summary>
            Tests Logger(IConfiguration) with multiply values of "default_level" attribute in named message
            configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestCtorWithInvalidParametersInNamedMessge">
            <summary>
            Tests Logger(IConfiguration) with invalid value of "parameters" attribute in named message
            configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogAccuracy">
            <summary>
            Tests Log(string, params object[]) for accuracy .
            Ensures the default level is used.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogWithArgumentNullException">
            <summary>
            Tests Log(string, params object[]) with ArgumentNullException.
            Ensures the exception will be thrown.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogWithMessageFormattingException">
            <summary>
            Tests Log(string, params object[]) with MessageFormattingException.
            Ensures the exception will be thrown.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogWithLoggingException">
            <summary>
            Tests Log(string, params object[]) with LoggingException.
            Ensures the exception will be thrown.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageAccuracy1">
            <summary>
            Tests LogNamedMessage(Level, NamedMessage, params object[]) for accuracy.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageWithException">
            <summary>
            Tests LogNamedMessage(Level, NamedMessage, params object[]) with exception (such as
            MessageFormattingException. Ensures the exception will be thrown.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageAccuracy2">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) for accuracy.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageWithNullString1">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) with null string.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageWithEmptyString1">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) with empty string.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageWithNameNoFound1">
            <summary>
            Tests LogNamedMessage(Level, string, params object[]) with message name no found.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageAccuracy3">
            <summary>
            Tests LogNamedMessage(string, params object[]) for accuracy. Ensures the default level of
            named message is used.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageWithNullString2">
            <summary>
            Tests LogNamedMessage(string, params object[]) with null string.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageWithEmptyString2">
            <summary>
            Tests LogNamedMessage(string, params object[]) with empty string.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerUnitTest.TestLogNamedMessageWithNameNoFound2">
            <summary>
            Tests LogNamedMessage(string, params object[]) with message name no found.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LoggingExceptionUnitTest">
             <summary>
             Unit test for LoggingException.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggingExceptionUnitTest.MESSAGE">
            <summary>
            <para>
            The error message used for testing.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggingExceptionUnitTest.CAUSE">
            <summary>
            <para>
            The inner cause used for testing.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggingExceptionUnitTest.exception">
            <summary>
            <para>
            An instance of LoggingException used for testing.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingExceptionUnitTest.Test0ParamCtor">
            <summary>
            <para>
            Accuracy test for the zero parameter constructor.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingExceptionUnitTest.Test1ParamCtor">
            <summary>
            <para>
            Accuracy test for the one parameter constructor. The message should be set properly.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingExceptionUnitTest.Test2ParamCtor">
            <summary>
            <para>
            Accuracy test for the two parameter constructor. The message and inner cause should be set properly.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingExceptionUnitTest.TestSerialization">
            <summary>
            <para>
            Ensures that the serialization constructor was given and set the message and inner cause properly.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LogManagerUnitTest">
             <summary>
             Unit test for LogManager.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManagerUnitTest.UL_ESL_FIELD">
            <summary>
            Represent the field named "underlyingLogger" in ExceptionSafeLogger.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManagerUnitTest.EL_ESL_FIELD">
            <summary>
            Represent the field named "exceptionLogger" in ExceptionSafeLogger.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManagerUnitTest.UL_LFL_FIELD">
            <summary>
            Represent the field named "underlyingLogger" in LevelFilteredLogger.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LogManagerUnitTest.FL_LFL_FIELD">
            <summary>
            Represent the field named "filteredLevels" in LevelFilteredLogger.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.RunAfterAllTests">
            <summary>
            <para>
            Clears the custom event logs after all tests.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerDefault">
            <summary>
            Tests CreateLogger() for accuracy.
            Ensures the default namespace is used and logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerMinimum">
            <summary>
            Tests CreateLogger(string) for accuracy. Only the required attributes are provided.
            Ensures the logger is created properly and default values of optional attributes are used.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerDiagnosticImpl">
            <summary>
            Tests CreateLogger(string) for DiagnosticImpl.
            Ensures logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerLog4NETImpl">
            <summary>
            Tests CreateLogger(string) for Log4NETImpl.
            Ensures logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerELSImpl">
            <summary>
            Tests CreateLogger(string) for ELSImpl.
            Ensures logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerEnterpriseLibraryLogger">
            <summary>
            Tests CreateLogger(string) for EnterpriseLibraryLogger.
            Ensures logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigMinimum">
            <summary>
            Tests CreateLogger(IConfiguration) for accuracy. Only the required attributes are provided.
            Ensures the logger is created properly and default values of optional attributes are used.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigExceptionPropagated">
            <summary>
            Tests CreateLogger(IConfiguration) for accuracy.
            Namespace "TopCoder.LoggingWrapper.ExceptionPropagated" is used.
            Ensures ExceptionSafeLogger will not be created.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigLevelsFiltered">
            <summary>
            Tests CreateLogger(IConfiguration) for accuracy.
            Namespace "TopCoder.LoggingWrapper.LevelsFiltered" is used.
            Ensures LevelFilteredLogger will be created.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigZeroConfiguration">
            <summary>
            Tests CreateLogger(IConfiguration) for accuracy.
            Namespace "TopCoder.LoggingWrapper.ZeroConfiguration" is used.
            Ensures zero configuration will not be used since this is not default namespace.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigDiagnosticImpl">
            <summary>
            Tests CreateLogger(IConfiguration) for DiagnosticImpl.
            Ensures logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigLog4NETImpl">
            <summary>
            Tests CreateLogger(IConfiguration) for Log4NETImpl.
            Ensures logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigELSImpl">
            <summary>
            Tests CreateLogger(IConfiguration) for ELSImpl.
            Ensures logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigEnterpriseLibraryLogger">
            <summary>
            Tests CreateLogger(IConfiguration) for EnterpriseLibraryLogger.
            Ensures logger is created properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerConfigWithNull">
            <summary>
            Tests CreateLogger(IConfiguration) with
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerNoLoggerClass">
            <summary>
            Tests CreateLogger(IConfiguration) with "logger_class" attribute absent.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerReflectionError">
            <summary>
            Tests CreateLogger(IConfiguration) with error occurs when creating logger through reflection
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerZeroConfigurationError">
            <summary>
            Tests CreateLogger(IConfiguration) with error occurs when applying zero configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerInvalidZeroConfigurationOption">
            <summary>
            Tests CreateLogger(IConfiguration) with invalid value of zero configuration.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerInvalidFilterLevels">
            <summary>
            Tests CreateLogger(IConfiguration) with invalid value of filter levels.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerDuplicateFilterLevels">
            <summary>
            Tests CreateLogger(IConfiguration) with duplicate value of filter levels.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.TestCreateLoggerExceptionLoggerError">
            <summary>
            Tests CreateLogger(IConfiguration) with error occurs when creating exception logger.
            ConfigException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.CheckNamedMessages(TopCoder.LoggingWrapper.Logger)">
            <summary>
            Checks the named messages in given logger is correct.
            </summary>
            <param name="logger">The logger to check.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LogManagerUnitTest.CheckField(TopCoder.LoggingWrapper.Logger,System.String,System.Object)">
            <summary>
            Checks the value the field of given name of logger.
            </summary>
            <param name="logger">The logger to check.</param>
            <param name="name">The name of field.</param>
            <param name="value">The expected value of field.</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.MessageFormattingExceptionUnitTest">
             <summary>
             Unit test for MessageFormattingException.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.MessageFormattingExceptionUnitTest.MESSAGE">
            <summary>
            <para>
            The error message used for testing.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.MessageFormattingExceptionUnitTest.CAUSE">
            <summary>
            <para>
            The inner cause used for testing.
            </para>
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.MessageFormattingExceptionUnitTest.exception">
            <summary>
            <para>
            An instance of MessageFormattingException used for testing.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.MessageFormattingExceptionUnitTest.Test0ParamCtor">
            <summary>
            <para>
            Accuracy test for the zero parameter constructor.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.MessageFormattingExceptionUnitTest.Test1ParamCtor">
            <summary>
            <para>
            Accuracy test for the one parameter constructor. The message should be set properly.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.MessageFormattingExceptionUnitTest.Test2ParamCtor">
            <summary>
            <para>
            Accuracy test for the two parameter constructor. The message and inner cause should be set properly.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.MessageFormattingExceptionUnitTest.TestSerialization">
            <summary>
            <para>
            Ensures that the serialization constructor was given and set the message and inner cause properly.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.NamedMessageUnitTest">
             <summary>
             Unit test for NamedMessage.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.NamedMessageUnitTest.TEXT">
            <summary>
            Represents a string as text for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.NamedMessageUnitTest.NAME">
            <summary>
            Represents a string as name for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.NamedMessageUnitTest.LEVEL">
            <summary>
            Represents a level for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.NamedMessageUnitTest.list">
            <summary>
            Represents a list of strings for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.SetUp">
            <summary>
            Creates instances for testing.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorAccuracy">
            <summary>
            Tests constructor for accuracy. Ensures all the fields are set properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorWithNullText">
            <summary>
            Tests constructor with null text.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorWithEmptyText">
            <summary>
            Tests constructor with empty text.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorWithNullName">
            <summary>
            Tests constructor with null name.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorWithEmptyName">
            <summary>
            Tests constructor with empty name.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorWithNullList">
            <summary>
            Tests constructor with null list.
            ArgumentNullException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorWithNullInList">
            <summary>
            Tests constructor with null in list.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorWithEmptyInList">
            <summary>
            Tests constructor with empty string in list.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.NamedMessageUnitTest.TestCtorWithInvalidLevel">
            <summary>
            Tests constructor with invalid level.
            ArgumentException is expected.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.DiagnosticImplTest">
            <summary>
            Test cases for LoggingWrapper
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplTest.StartUp">
            <summary>
            Set ups configuration of the LogManager
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplTest.LogInitializedCorectly">
            <summary>
            Test if a log is of expected type.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplTest.isSimpleEntryWriten">
            <summary>
            Tests if log entry is actualy writen to the system event log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplTest.isFormatedEntryWriten">
            <summary>
            Tests if log entry is actualy writen to the system event log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.DiagnosticImplTest.Down">
            <summary>
            Removes test log from the system.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.Log4NETImplTest">
            <summary>
            Test cases for LoggingWrapper
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.Log4NETImplTest.logfile">
            <summary>
            <para>Private attribute holding the path to error log file.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplTest.StartUp">
            <summary>
            <para>Prepares the environment for testing.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplTest.LogInitializedCorectly">
            <summary>
            Test if a log is of expected type.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplTest.isSimpleEntryWriten">
            <summary>
            Tests if log entry is actualy writen to the system event log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplTest.isFormatedEntryWriten">
            <summary>
            Tests if log entry is actualy writen to the system event log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.Log4NETImplTest.Down">
            <summary>
            Removes test log from the system.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LoggerTester">
             <summary>
             A helper class to test the interface methods without going through the other derived methods.  It is also
             used as a test of creating a logger from another assembly, which is why it is in it's own file.  This allows
             the custom dll "CustomDll.dll" to be built using the command
             "csc /target:library /out:customdll.dll /r:..\..\..\..\..\build\classes\TopCoder.LoggingWrapper.Test.dll LoggerTester.cs".
             This library will need to be rebuilt if the Logger interface ever changes, simply use the above command when having
             built TopCoder.LoggingWrapper.Test.dll and then move customdll.dll to the test_files directory.
            
             This is neccesary because otherwise the Logger class will be loaded twice, for example, if we attempt to
             use the default TopCoder.LoggingWrapper.dll or even the test assembly, it does not matter.  The .NET system
             will load the assembly into memory again, and then it will not be able to recognize the Logger class that
             the dervied Logger is using, and we will get an InvalidCastException.
             </summary>
             <author>TCSDEVELOPER</author>
             <version>1.0</version>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerTester.LogCalled">
            <summary>
            Whether the Log method was called or not.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerTester.LogLevelCalled">
            <summary>
            The Level the Log method was called with.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerTester.LogMessageCalled">
            <summary>
            The message the Log method was called with.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.LoggerTester.LogParamCalled">
            <summary>
            The parameters the Log method was called with.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerTester.#ctor(System.String)">
            <summary>
            Needed constructor
            </summary>
            <param name="logname"></param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerTester.#ctor(System.String,TopCoder.LoggingWrapper.Level)">
            <summary>
            Needed constructor
            </summary>
            <param name="logname"></param>
            <param name="defaultLevel"></param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerTester.#ctor(System.Collections.IDictionary)">
            <summary>
            Needed constructor
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerTester.Dispose">
            <summary>
            Dispose is also required.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerTester.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            Tests the Log() functionality.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="param"></param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggerTester.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            IsLevelEnabled is also required to be overridden.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:TopCoder.LoggingWrapper.LoggingWrapperTest">
            <summary>
            Test cases for LoggingWrapper
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.StartUp">
            <summary>
            <para>Prepares the environment for testing.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.LoadConfiguration">
            <summary>
            <para>Tests the LoadConfiguration, if it can complete successfully.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.InvalidImplementationException">
            <summary>
            <para>Tests the LoadPlugin when it is passed an invalid class name. It
            should throw <b>InvalidPluginException</b>.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.ConfigException">
            <summary>
            <para>Tests the LoadPlugin when it is passed an nonexistant class name. It
            should throw <b>ConfigException</b>.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.SimpleLog">
            <summary>
            <para>Tests the <b>LogManager.Log</b> method if it can log successfully.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.FormatLog">
            <summary>
            <para>Tests the <b>LogManager.Log</b> method if it can log with formatted string.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.ReloadConfigurationDuringExecution">
            <summary>
            <para>Tests the <b>LogManager.LoadConfiguration</b> method if it can
            work between two Log calls.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.RetrievingLoggingSolution">
            <summary>
            <para>Tests if the the logger is equal to what is configured.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.IsEnableLoggingLevel">
            <summary>
            <para>Tests whether the OFF log level is enable.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.SetupDefaultLoggingLevel">
            <summary>
            <para>Tests whether setting of the log level works correctly.</para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.LoggingWrapperTest.Down">
            <summary>
            Removes test log from the system.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.UnitTestConfigException">
            <summary>
            Unit tests the ConfigException class.
            </summary>
            <author>TCSDEVELOPER</author>
            <version>1.0</version>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestConfigException.CreateConfigExceptionString">
            <summary>
            Creates an ConfigException object.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestConfigException.CreateConfigExceptionStringException">
            <summary>
            Creates an ConfigException object.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl">
            <summary>
            Unit tests the DiagnosticImpl class.
            </summary>
            <author>TCSDEVELOPER</author>
            <version>1.0</version>
        </member>
        <member name="F:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.properties">
            <summary>
            Some test properties for the log to initialize with.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.properties2">
            <summary>
            Some test properties for the log to initialize with.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.log">
            <summary>
            A default DiagnosticImpl instance to test with.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.LOG_NAME">
            <summary>
            The name of the log file that will be used to write the test log to.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.Initialize">
            <summary>
            Sets up some useful variables for testing DiagnosticImpl
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.Down">
            <summary>
            Removes the test log from the system.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.TestSourceStringCorrect">
            <summary>
            Makes sure the SOURCE property is correct.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CreateDiagnosticImplNullParameter">
            <summary>
            Attemps to create a DiagnosticImpl instance with a null properties parameter.
            Should throw ArgumentNullException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CreateDiagnosticImplNoSource">
            <summary>
            Attemps to create a DiagnosticImpl instance with a properties dictionary missing the source property.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CreateDiagnosticImplSourcePropertyInvalid">
            <summary>
            Attemps to create a DiagnosticImpl instance with a config_file property that isn't a string.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CreateDiagnosticImpl">
            <summary>
            Creates a DiagnosticImpl instance and checks that everything is initialized properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CheckSimpleEntryWritten">
            <summary>
            Checks if a simple message is correctly written to the log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CheckFormattedEntryWritten">
            <summary>
            Checks if a formatted message is correctly written to the log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CheckSimpleEntryWrittenLevelInfo">
            <summary>
            Checks if a simple message is correctly written to the log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CheckFormattedEntryWrittenLevelInfo">
            <summary>
            Checks if a formatted message is correctly written to the log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CheckEntryNotWrittenLevelTooLow">
            <summary>
            Checks if the level is obeyed when writing to the file.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.LogExceptionIgnore">
            <summary>
            Ensures that any exceptions thrown by Log() are ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.TestLevelEnabled">
            <summary>
            Checks to ensure all Levels are enabled in IsLevelEnabled.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CheckForString(System.String)">
            <summary>
            Checks to see if the string is present on the first line of the file.
            </summary>
            <param name="written">The string to check for.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestDiagnosticImpl.CheckStringNotExist(System.String)">
            <summary>
            Checks to see if the string is present on the first line of the file.
            </summary>
            <param name="written">The string to check for.</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.UnitTestLog4NETImpl">
            <summary>
            Unit tests the Log4NETImpl class.
            </summary>
            <author>TCSDEVELOPER</author>
            <version>1.0</version>
        </member>
        <member name="F:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.logfile">
            <summary>
            The name of the log file that will be used to write the test log to.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.properties">
            <summary>
            Some test properties for the log to initialize with.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.properties2">
            <summary>
            Some test properties for the log to initialize with.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.log">
            <summary>
            A default Log4NETImpl instance to test with.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.Initialize">
            <summary>
            Sets up some useful variables for use later on.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.Destroy">
            <summary>
            Cleans up any files that were left on the system.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.TestConfigFileStringCorrect">
            <summary>
            Makes sure the CONFIG_FILE property is correct.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CreateLog4NETImplNullParameter">
            <summary>
            Attemps to create a Log4NETImpl instance with a null properties parameter.
            Should throw ArgumentNullException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CreateLog4NETImplNoConfigFile">
            <summary>
            Attemps to create a Log4NETImpl instance with a properties dictionary missing the config_file property.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CreateLog4NETImplInvalidConfigFile">
            <summary>
            Attemps to create a Log4NETImpl instance with a config_file property pointing to a non-existant file.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CreateLog4NETImplConfigFilePropertyInvalid">
            <summary>
            Attemps to create a Log4NETImpl instance with a config_file property that isn't a string.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CreateLog4NET">
            <summary>
            Creates a Log4NETImpl instance and checks that everything is initialized properly.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CheckSimpleEntryWritten">
            <summary>
            Checks if a simple message is correctly written to the log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CheckFormattedEntryWritten">
            <summary>
            Checks if a formatted message is correctly written to the log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CheckSimpleEntryWrittenLevelInfo">
            <summary>
            Checks if a simple message is correctly written to the log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CheckFormattedEntryWrittenLevelInfo">
            <summary>
            Checks if a formatted message is correctly written to the log.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CheckEntryNotWrittenLevelTooLow">
            <summary>
            Checks if the level is obeyed when writing to the file.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.LogExceptionIgnore">
            <summary>
            Ensures that any exceptions thrown by Log() are ignored.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.TestLevelEnabled">
            <summary>
            Checks to ensure all Levels are enabled in IsLevelEnabled.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CheckForString(System.String)">
            <summary>
            Checks to see if the string is present on the first line of the file.
            </summary>
            <param name="written">The string to check for.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLog4NETImpl.CheckStringNotExist(System.String)">
            <summary>
            Checks to see if the string is present on the first line of the file.
            </summary>
            <param name="written">The string to check for.</param>
        </member>
        <member name="T:TopCoder.LoggingWrapper.UnitTestLogger">
            <summary>
            Unit tests the Logger class.  Uses a specificially derived class to make sure that the concrete Logger methods
            perform the correct operations they should.
            </summary>
            <author>TCSDEVELOPER</author>
            <version>1.0</version>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.TestDefaultLevelStatic">
            <summary>
            Makes sure the Logger.DEFAULT_LEVEL constant is correctly set.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.TestLoggerNameStatic">
            <summary>
            Makes sure the Logger.LOGGER_NAME constant is correctly set.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLoggerNullLogname1">
            <summary>
            Attempts to create a Logger with a null logname.
            Should throw ArgumentNullException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLoggerEmptyLogname1">
            <summary>
            Attempts to create a Logger with a null logname.
            Should throw ArgumentException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger1">
            <summary>
            Creates a Logger and verifies that the public properties are correctly initialized.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLoggerNullLogname2">
            <summary>
            Attempts to create a Logger with a null logname, 2 parameter version.
            Should throw ArgumentNullException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLoggerEmptyLogname2">
            <summary>
            Attempts to create a Logger with an empty logname, 2 parameter version.
            Should throw ArgumentException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger2">
            <summary>
            Creates a Logger and verifies that the public properties are correctly initialized.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger3NullParam">
            <summary>
            Attempts to create a Logger with a null IDictionary.
            Should throw ArgumentNullException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger3NoLoggerName">
            <summary>
            Attempts to create a Logger with no logger_name variable.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger3NullLoggerName">
            <summary>
            Attempts to create a Logger with a null logger_name variable.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger3EmptyLoggerName">
            <summary>
            Attempts to create a Logger with an empty logger_name variable.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger3NoDefaultLevel">
            <summary>
            Attempts to create a Logger with no default_level variable.  This should succeed as it is optional.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger3InvalidDefaultLevel">
            <summary>
            Attempts to create a Logger with an invalid default_level variable.
            Should throw ConfigException.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.CreateLogger3">
            <summary>
            Creates a valid Logger instance and checks that the properties have been correctly initialized.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.UnitTestLogger.LogMessagePassParameters">
            <summary>
            Calls the Log() message and ensures that the parameters are correctly passed through.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.SimpleLogger">
             <summary>
             A simple logger extends abstract class Logger for testing. The passed in arguments is stored
             in static fields so that they can be retrieved for testing. By presetting the exception to be
             thrown in methods, it can also be used for failure tests.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.SimpleLogger.lastLevel">
            <summary>
            Represents the level argument passed in to the Log method.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.SimpleLogger.lastMessage">
            <summary>
            Represents the message argument passed in to the Log method.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.SimpleLogger.lastParam">
            <summary>
            Represents the param argument passed in to the Log method.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.SimpleLogger.lastDispose">
            <summary>
            Represents the flag whether method Dispose is called.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.SimpleLogger.isEnable">
            <summary>
            Represents the value returned by the next call to IsLevelEnabled.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.SimpleLogger.ex">
            <summary>
            Represents the exception to be thrown in methods.
            Note that the exception will be thrown just once everytime it is set so that other tests
            won't be affected.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.SimpleLogger.isInitiaized">
            <summary>
            A flag show whether InitializeZeroConfiguration is called for current object.
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.#ctor">
            <summary>
             <para>
            Creates a new instance of Logger with the default log name. Delegates for the same named method
            in super class.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.#ctor(System.String)">
            <summary>
            <para>
            Creates a new instance of Logger with the given log name. Delegates for the same named method
            in super class.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <exception cref="T:System.ArgumentNullException">If logname is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.#ctor(System.String,TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Creates a new instance of Logger with the given log name and default level. Delegates for the
            same named method in super class.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <param name="defaultLevel">The default logging level.</param>
            <exception cref="T:System.ArgumentNullException">If logname is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.#ctor(System.String,TopCoder.LoggingWrapper.Level,System.Collections.Generic.IDictionary{System.String,TopCoder.LoggingWrapper.NamedMessage})">
            <summary>
            <para>
            Creates a new instance of Logger with the log name and the default level and set of named
            messages. Delegates for the same named method in super class.
            </para>
            </summary>
            <param name="logname">The name of the logger.</param>
            <param name="defaultLevel">The default logging level.</param>
            <param name="namedMessages">The dictionary mapping identifiers to named messages that should be
            used by this logger.</param>
            <exception cref="T:System.ArgumentNullException">If logname or namedMessages is null.</exception>
            <exception cref="T:System.ArgumentException">If logname is an empty string, or namedMessages contains a
            null or empty key or any null values.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.#ctor(TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Creates a new instance of the Logger with setting loaded from the given configuration.
            Delegates for the same named method in super class.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
            <param name="configuration">The configuration object to load settings from.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.ConfigException">
             If any of the configuration settings are missing or are invalid values.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.Dispose">
            <summary>
            <para>
            Disposes the resources held by the logger. Sets lastDispose true.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.Log(TopCoder.LoggingWrapper.Level,System.String,System.Object[])">
            <summary>
            <para>
            Logs a message using the underlying implementation with the specified logging level.
            All the arguments will be stored in name-like static fields.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
            <param name="level">The logging level of the message being logged.</param>
            <param name="message">The message to log, can contain {0}, {1}, ... for inserting parameters.
            </param>
            <param name="param">The parameters used to format the message (if needed).</param>
            <exception cref="T:System.ArgumentNullException">If message or param is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message with
            params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If an error occurs in the backend.</exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.IsLevelEnabled(TopCoder.LoggingWrapper.Level)">
            <summary>
            <para>
            Used to determine if a specific logging level is supported by underlying implementation.
            Returns the value set by IsEnable.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
            <param name="level">The logging level to check.</param>
            <returns>the value set by IsEnable.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.LogNamedMessage(TopCoder.LoggingWrapper.Level,TopCoder.LoggingWrapper.NamedMessage,System.Object[])">
            <summary>
            <para>
            Logs the named message to the underlying implementation with the specified logging level.
            Delegates for the same named method in super class.
            </para>
            <para>
            If ex is not null, it will be thrown.
            </para>
            </summary>
            <param name="level">The level at which to log the message.</param>
            <param name="message">The named message to log.</param>
            <param name="param">The parameters to use in formatting the message.</param>
            <exception cref="T:System.ArgumentNullException">If any parameter is null.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.MessageFormattingException">If there is an error formatting the message from
            the params.</exception>
            <exception cref="T:TopCoder.LoggingWrapper.LoggingException">If there is a failure in the backend logging system.
            </exception>
        </member>
        <member name="M:TopCoder.LoggingWrapper.SimpleLogger.InitializeZeroConfiguration(TopCoder.LoggingWrapper.ZeroConfigurationOption,TopCoder.Configuration.IConfiguration)">
            <summary>
            <para>
            Initializes the configuration. Sets attribute "isInitiaized" in configuration to true.
            </para>
            </summary>
            <param name="option">The option about which zero-configuration setup should be configured in
            the backend.</param>
            <param name="configuration">The configuration object to which needed configuration settings are
            added.</param>
        </member>
        <member name="P:TopCoder.LoggingWrapper.SimpleLogger.LastLevel">
            <summary>
            Represents the property to get the level argument passed in to the Log method.
            </summary>
            <value>The level argument passed in to the Log method.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.SimpleLogger.LastMessage">
            <summary>
            Represents the property to get the message argument passed in to the Log method.
            </summary>
            <value>The message argument passed in to the Log method.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.SimpleLogger.LastParam">
            <summary>
            Represents the property to get the param argument passed in to the Log method.
            </summary>
            <value>The param argument passed in to the Log method.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.SimpleLogger.LastDispose">
            <summary>
            Represents the property to get whether method Dispose is called. The property only return
            true once for each call to Dispose.
            </summary>
            <value>The param argument passed in to the Log method.</value>
        </member>
        <member name="P:TopCoder.LoggingWrapper.SimpleLogger.IsEnable">
            <summary>
            Represents the property to set the value returned by the next call to IsLevelEnabled.
            </summary>
        </member>
        <member name="P:TopCoder.LoggingWrapper.SimpleLogger.Ex">
            <summary>
            Represents the property to set the exception to thrown in methods.
            </summary>
        </member>
        <member name="P:TopCoder.LoggingWrapper.SimpleLogger.IsInitiaized">
            <summary>
            Represents the property to get the flag isInitiaized.
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.TestHelper">
             <summary>
             Helper class for tests.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>3.0</version>
             <copyright>Copyright (c)2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="F:TopCoder.LoggingWrapper.TestHelper.LOG_NAME">
            <summary>
            A string as name of log for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.TestHelper.MACHINE_NAME">
            <summary>
            A string as name of machine for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.TestHelper.ELS_URL">
            <summary>
            A string as url of service for testing.
            </summary>
        </member>
        <member name="F:TopCoder.LoggingWrapper.TestHelper.DEFAULT_LOGGER_CLASS_APP_SETTING_NAME">
            <summary>
            <para>
            Represent the defalut logger class used to be created.
            </para>
            </summary>
        </member>
        <member name="M:TopCoder.LoggingWrapper.TestHelper.CreateLogs(System.String)">
            <summary>
            <para>
            Create custom event logs with given source for test.
            </para>
            </summary>
            <param name="source">The source of logs.</param>
        </member>
        <member name="M:TopCoder.LoggingWrapper.TestHelper.GetLogsCount(System.String)">
            <summary>
            <para>
            Gets the number of event logs with given source.
            </para>
            </summary>
            <param name="source">The source of logs.</param>
            <returns>The number of event logs with given source.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.TestHelper.GetLogEntry(System.String,System.Int32)">
            <summary>
            <para>
            Gets the event log entry with given index in given source.
            </para>
            </summary>
            <param name="source">The source of logs.</param>
            <param name="index">The index of event log message.</param>
            <returns>The event log entry with given index in given source.</returns>
        </member>
        <member name="M:TopCoder.LoggingWrapper.TestHelper.ClearLogs">
            <summary>
            <para>
            Clears custom event logs for test.
            </para>
            </summary>
        </member>
        <member name="T:TopCoder.LoggingWrapper.ZeroConfigurationOptionUnitTest">
             <summary>
             Unit test for ZeroConfigurationOption.
             </summary>
            
             <author>TCSDEVELOPER</author>
             <version>1.0</version>
             <copyright>Copyright (c) 2008, TopCoder, Inc. All rights reserved.</copyright>
        </member>
        <member name="M:TopCoder.LoggingWrapper.ZeroConfigurationOptionUnitTest.TestZeroConfigurationOption">
            <summary>
            Tests the accuracy of definition ZeroConfigurationOption.
            </summary>
        </member>
    </members>
</doc>
